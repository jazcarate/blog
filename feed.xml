<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://blog.florius.com.ar/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.florius.com.ar/" rel="alternate" type="text/html" /><updated>2021-06-25T10:54:47+00:00</updated><id>https://blog.florius.com.ar/feed.xml</id><title type="html">Florius‚Äô Blog</title><subtitle>Joaquin 'Florius' Azcarate‚Äôs personal blog</subtitle><author><name>florius</name></author><entry><title type="html">On costs, graphs and integrals</title><link href="https://blog.florius.com.ar/rambling/coding/2021/06/24/costs-graphs-integrals/" rel="alternate" type="text/html" title="On costs, graphs and integrals" /><published>2021-06-24T17:33:00+00:00</published><updated>2021-06-24T17:33:00+00:00</updated><id>https://blog.florius.com.ar/rambling/coding/2021/06/24/costs-graphs-integrals</id><content type="html" xml:base="https://blog.florius.com.ar/rambling/coding/2021/06/24/costs-graphs-integrals/">&lt;p&gt;Lately, and by mere coincidence, I was discussing programming language choices. When or why should you choose language X over Y. And apart from the usual suspects like&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;‚Äúfamiliarity in the team‚Äù&lt;/li&gt;
  &lt;li&gt;‚Äúinteroperability with other pieces in the ecosystem‚Äù and&lt;/li&gt;
  &lt;li&gt;‚Äúexisting dependencies that we can leverage‚Äù&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;the idea of how to deal with complexity came up.&lt;/p&gt;

&lt;p&gt;In this blog post I would like to explore an idea that I can so clearly see with graphs in my mind, but takes more than a quick chat to get across. So hopefully, next time I‚Äôm in a position to talk about languages or any other technology to tackle a problem, I can point to random graphs&lt;sup id=&quot;fnref:graphs&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:graphs&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; in this article and it will make more sense to my interlocutor.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The graphs here were made with &lt;a href=&quot;https://jazcarate.github.io/rough-graph/&quot;&gt;jazcarate :: Rough Graph&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;limits&quot;&gt;Limits&lt;/h2&gt;
&lt;p&gt;So, let‚Äôs start by setting the groundwork for the next graphs. Some axioms we‚Äôll assume true for the sake of discussion:&lt;/p&gt;

&lt;h3 id=&quot;complexity&quot;&gt;Complexity&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;There is an upper- and lower-bound on the complexity of any given system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The lower limit should be fairly easy to convince, there is such thing as a trivial program&lt;sup id=&quot;fnref:pure&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:pure&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.
On the other hand, the higher bound. And this is a bit more contentious. One can think of this limit as either:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The allowed limit of the universe. A sub-system can never be more complex than the system on which it is embedded.&lt;/li&gt;
  &lt;li&gt;Or, if &lt;a href=&quot;https://en.wikipedia.org/wiki/Simulation_hypothesis&quot;&gt;simulation theory&lt;/a&gt; is too scary, the maximum capacity of the given team to tackle.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Either way, complexity is be bounded for the sake of this thought experiment.&lt;/p&gt;

&lt;h3 id=&quot;costs&quot;&gt;Costs&lt;/h3&gt;
&lt;p&gt;There are many ways to measure &lt;em&gt;costs&lt;/em&gt;. In this post, let‚Äôs not dwell much on what unit of measurement we chose. In other words, pick whichever is more relatable to you, and I think that my explorations would still make sense:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lines of code&lt;/li&gt;
  &lt;li&gt;Number of entities in the ER model.&lt;/li&gt;
  &lt;li&gt;Human Hours&lt;/li&gt;
  &lt;li&gt;Money spent&lt;/li&gt;
  &lt;li&gt;Number of sticky notes in the ‚Äúüòü‚Äù column in the retrospective.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;other&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But any of these will be, as complexity, bounded at both ends.
These two parameters give us a neat 2-dimensional space to explore the &lt;em&gt;cost/complexity&lt;/em&gt; of things. So, without further ado, I present you with the first graph.&lt;/p&gt;

&lt;h2 id=&quot;types&quot;&gt;Types&lt;/h2&gt;
&lt;h3 id=&quot;absurd-scenario&quot;&gt;Absurd scenario&lt;/h3&gt;

&lt;p&gt;No matter the complexity, the cost is constant.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Absurd scenario&quot; src=&quot;/assets/cost-graphs-integrals/absurd-85b8aa5a4abe03ee99b33a66fa4cf295448187dd1b91527f71d88833353eb445fae7ee28c76dfd5c42a1a679ab3b3f83097a4b90c2a0d55f248010d8b0a67f97.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With much grievances; I‚Äôll tell you that there exists no technology that can deliver on this. Complexity will always carry with it a cost. There might be technologies that promise this kind of behavior. They don‚Äôt exist&lt;sup id=&quot;fnref:NFL&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:NFL&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h3 id=&quot;ideal-scenario&quot;&gt;Ideal scenario&lt;/h3&gt;
&lt;p&gt;So a better notion is that there is a lower bound of how much complexity incurs in cost. I think it would not be unreasonable to propose that the marginal cost is proportional to the change of complexity.&lt;/p&gt;

&lt;p&gt;With this mindset, we can establish a ‚Äúminimum‚Äù graph. Technologies might promise better ratios, but we should mistrust.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Ideal scenario&quot; src=&quot;/assets/cost-graphs-integrals/ideal-29c2b7cf352aa28431fd9e4cd8f1db05d87c31c8606e3787424f6aacfc1ddb3418680893813ca35f5a66504a73ad23e7ca2170e7f03e940d686f158cff2d67a8.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is worth mentioning that in all these graphs, a given complexity in the horizontal axis is but the accumulation of costs to reach to that complexity level, as to reach a complexity level of \(n\), one must first cover \(n-\epsilon\) (where \(\epsilon \in \mathbb{R}_{&amp;gt;0}\)). If we call \(f\) the function that we are plotting, then there exists a \(\Delta f \colon \mathbb{Complexity} \mapsto \mathbb{Cost}\) where \(f(complexity) = \int_{0}^{complexity} \Delta f(x) \,dx\)). A useful corollary from this fact, is that our graphs are monotonically non-decreasing. And those are fun! üò∫.&lt;/p&gt;

&lt;p&gt;Now that we established a common ground to talk about complexity and cost, let‚Äôs dive into three distinct categories of technologies: &lt;strong&gt;Pay as you go&lt;/strong&gt;, &lt;strong&gt;Debt&lt;/strong&gt; and, &lt;strong&gt;Upfront&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;pay-as-you-go&quot;&gt;Pay as you go&lt;/h3&gt;
&lt;p&gt;Maybe the most alluring. The more complex a problem, the more it costs to solve. It is a sensible way of understanding technology. The many flavors of pay as you go differ from one another by their slope, or their initial cost. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;-like languages fall squarely here.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Pay as you go&quot; src=&quot;/assets/cost-graphs-integrals/pay-as-you-go-f9279b87eede36920d95559a4497344dbe9c0c2c60bdb510d37eb58310984e73e773e9a8b76423a1942b9dfecb8addf485859ac11f8d833924d8c9ebb4bd5459.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Technologies here could be plotted with a slightly different slope or initial height. I don‚Äôt much care about the details comparing each of these technologies üòÖ. They are great all-around options. &lt;em&gt;Jack of all trades, master of none&lt;/em&gt;. I see these technologies as the backbone of the software industry. Some have a steeper \(\Delta f\), where some have a costlier start; but on in all, they grow linearly. Never being able to have a slope less than the ideal scenario.&lt;/p&gt;

&lt;p&gt;Examples of these are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Java&lt;/li&gt;
  &lt;li&gt;c&lt;/li&gt;
  &lt;li&gt;SQL&lt;/li&gt;
  &lt;li&gt;Hibernate*&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these follow the pattern:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Simple things are cheap. Complex things are costly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A note on &lt;em&gt;Hibernate&lt;/em&gt;, and many others: Complexity is treated here as a one-size-fits-all kind of thing. The reality, sadly, is much more complicated.
If you were to focus on the \(\frac{cost}{complexity}\) of say, switching databases. Then an &lt;abbr title=&quot;object-relational mapping &quot;&gt;ORM&lt;/abbr&gt; like Hibernate makes a &lt;a href=&quot;#upfront&quot;&gt;upfront&lt;/a&gt; cost for simple things to have a better marginal cost when reaching the complex side of the spectrum.&lt;/p&gt;

&lt;p&gt;But we are not here to talk about workhorses, but rather the odd ones out. So on to the more interesting ones!&lt;/p&gt;

&lt;h3 id=&quot;debt&quot;&gt;Debt&lt;/h3&gt;
&lt;p&gt;These are the most interesting to me. Technologies that promise you a very low barrier of entry.&lt;/p&gt;

&lt;p&gt;Simple things can be done incredibly fast and easy, without hindering other non-functional aspects like security or speed. But, as in real life, these are not free. At some point in the complexity scale, things start to become hard. And way hard at that.&lt;/p&gt;

&lt;p&gt;All those nice defaults start to work against your custom needs. You start to &lt;em&gt;fight&lt;/em&gt; the framework, find ways around checks and validations. Ways that deviate from the secure, fast, reliable path.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Debt&quot; src=&quot;/assets/cost-graphs-integrals/debt-90baa93278b2045adc96a2dc82a245896e90ea9a771cfa714ba3140d1f4336712fe0c9e4f896fe8c1d08171ea5495b1cc2f0ac1ffb799490405b2e2ed5e2b74b.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Examples of these are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Node‚Äôs ecosystem&lt;/li&gt;
  &lt;li&gt;Ruby on Rails&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/No-code_development_platform&quot;&gt;no-code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And Ruby on Rails or Node.js fans might argue that that is not the case; that the cost does rarely increase. And that this reflects on my general lack of understanding of the deeper systems, or the metaprogramming machinery, or &lt;em&gt;yet another dependency&lt;/em&gt; that can be used both as an import, a CLI, or a bundler ‚∏Æ . For which I will yield, that this is probably true. And that this is not a counterargument, but rather proof. At a certain point, the complexity of a problem intertwines with the complexity of the technology; compounding on the costs.&lt;/p&gt;

&lt;p&gt;Thus, the exponentially of the matter. Remember that, the cost at the end of the complexity axis, &lt;strong&gt;must&lt;/strong&gt; always be greater than the ideal scenario. There is no, and will never be, a piece of technology that can beat the cruel reality that complexity carries costs.&lt;/p&gt;

&lt;p&gt;But this is a good thing to learn from these: If you know that the complexity of a problem is capped, then these alternatives are just what you need.
If you need a &lt;abbr title=&quot;Create, read, update and delete&quot;&gt;CRUD&lt;/abbr&gt; API, some web views with some forms, a little OAuth without much customization; then I &lt;em&gt;encourage&lt;/em&gt; the use of these sort of technologies.&lt;/p&gt;

&lt;p&gt;Looking at the graph, there is a point where the ideal and the &lt;strong&gt;Debt&lt;/strong&gt; intersects. If you can be sure that the complexity will always be on the left-hand side; then using any other technology will be ill-advised. But, if the threshold does get crossed, then you are stuck between switching to another type of technology, and re-paying all the costs to get you to this point; or deal with an exorbitant \(\frac{cost}{complexity}\).&lt;/p&gt;

&lt;h4 id=&quot;partial-payment&quot;&gt;Partial payment&lt;/h4&gt;
&lt;p&gt;Be not mistaken, the cost difference before the &lt;strong&gt;Debt&lt;/strong&gt; curve and the &lt;strong&gt;Ideal&lt;/strong&gt; curve meet was paid by the designers of the technology. And we should be grateful that they allow us to offset a big chunk of our costs to their endeavors.&lt;/p&gt;

&lt;h3 id=&quot;upfront&quot;&gt;Upfront&lt;/h3&gt;
&lt;p&gt;Finally: &lt;strong&gt;Upfront&lt;/strong&gt;. These are a treat. You pay a steep cost upfront, but after some turning point, then the marginal cost is cheap. &lt;em&gt;Managing&lt;/em&gt; complexities. Composition, ways of meta-programing, having tools for code synthesis are all techniques that pay this cost upfront for future gains.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Upfront&quot; src=&quot;/assets/cost-graphs-integrals/upfront-76235fa95d9823b8f06e6284ae5e7439f103d79ff8274ad9c5d9558b451de50cd5fa6ad39217f7e45eecbf5dff3a59e70814c477279ac354829a856830a542e5.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some might call this approach &lt;em&gt;over engineering&lt;/em&gt;, and it is true; up until the point where failing to have done it, the cost is greater.
In other words:&lt;/p&gt;

\[overEngineered(complex) = \left\{
     \begin{array}{ll}
       \text{Yes}  &amp;amp;: payAsYouGo(complex) \leq upfront(complex) \\
       \text{No}   &amp;amp;: \text{otherwise.} \\
     \end{array}
   \right.\]

&lt;p&gt;Examples of these are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Haskell&lt;/li&gt;
  &lt;li&gt;Lisp&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://haskellwingman.dev/&quot;&gt;Wingman&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Macros&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Maybe you are one of the enlightened few to have partially-payed some of the costs and already know about Œ≤-reduction, monad composition&lt;sup id=&quot;fnref:monad_composition&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:monad_composition&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;, or other techniques to manage complexity; but be not mistaken that that cost will be paid for every other person that has to deal with it in the future.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;No technology is better or worse in the abstract. It is a choice between good things, and bad things. In this blog post, I wanted to explore a different way of evaluating a piece of technology with just these two axes. And hopefully, give you a new tool to measure up prospects for your next undertaking.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Comparison&quot; src=&quot;/assets/cost-graphs-integrals/comparison-e73fa01027db34bb6e3478ec5ba0795c1b7436d8c8a58da5e34ac2e7d3a02b1ae4a29a9705926f681aab541d7c4dc0d23c086e168f0aa8def432a7db7209f086.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So I leave you with this final question to encapsulate all of these learnings:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Does either cost or complexity have a ceiling in this project?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And then, it is a matter of putting a horizontal or vertical line on the limit and seeing what strategy yields better results.&lt;/p&gt;

&lt;p&gt;More often than not, one wants to minimize costs but complexity is set. Therefore the 1-picture-summary would be:&lt;/p&gt;

\[f(complexity) = min( upfront(complexity), payAsYouGo(complexity), debt(complexity) )\]

&lt;p&gt;&lt;img alt=&quot;Comparison&quot; src=&quot;/assets/cost-graphs-integrals/comparison-min-76c7a99f1abf57fd2185f02ac5d650011dea0d7d4cb2622d80c2abc5ac4073ee7a75f68a57192699d304d4654235e393c8348d642d6184527e92fbbf87acedc1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I‚Äôm not advocating on using a &lt;strong&gt;Debt&lt;/strong&gt; technology at the begging and then &lt;em&gt;switching&lt;/em&gt; mid-project; as the cost at the switching point will double; but rather a methodology of choosing the &lt;em&gt;correct&lt;/em&gt; shape to deal with the expected complexity of it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nobody Gets Fired For Buying IBM&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I‚Äôll surrender that choosing a technology is an architectural decision done at the start of a project, and knowing how complex it will end up being is almost impossible. This is why, I think, &lt;strong&gt;pay as you go&lt;/strong&gt; technologies are so prevalent.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:graphs&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;The idea of a graph with no units, no scale, or raw data to replicate them irks me. If you are like me, think of these not like ‚Äúgraphs‚Äù, but rather pretty pictures üòä.¬†&lt;a href=&quot;#fnref:graphs&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:pure&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;If you allow the idea of representing a program as data, and are Haskell inclined, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pure :: IO ()&lt;/code&gt; would be what I refer to as a ‚Äútrivial complexity‚Äù, as it &lt;em&gt;does&lt;/em&gt; nothing. It has no explanation on what it &lt;em&gt;does&lt;/em&gt;, and there is nothing that can be taken from it to reach a valid program; hence the lower bound on complexity.¬†&lt;a href=&quot;#fnref:pure&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:NFL&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/No_free_lunch_theorem&quot;&gt;No free lunch&lt;/a&gt; theorem.¬†&lt;a href=&quot;#fnref:NFL&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:monad_composition&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Or rather lack thereof.¬†&lt;a href=&quot;#fnref:monad_composition&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Joaquin 'Florius' Azcarate</name></author><category term="rambling" /><category term="coding" /><summary type="html">Yet another tool to pick a technology. How do the cost of the choice evolve over the complexity. Is there a one-solution-fits-all? In this blog post we'll delve into some visualization to understand the difference between choosing Java, Haskell, Hibernate, Ruby on Rails or drop programing altogether for a no-code approach. Let's dive into the world of optimizations, integrals and many many graphs!</summary></entry><entry><title type="html">Why Do I Write?</title><link href="https://blog.florius.com.ar/rambling/2021/05/28/why-do-I-write/" rel="alternate" type="text/html" title="Why Do I Write?" /><published>2021-05-28T14:54:00+00:00</published><updated>2021-05-28T14:54:00+00:00</updated><id>https://blog.florius.com.ar/rambling/2021/05/28/why-do-I-write</id><content type="html" xml:base="https://blog.florius.com.ar/rambling/2021/05/28/why-do-I-write/">&lt;blockquote&gt;
  &lt;p&gt;Why does this blog exist? Is it worth the carbon footprint to compile, host and serve this blog?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In my worldview, programming is much more about &lt;strong&gt;transmission of knowledge&lt;/strong&gt; than remembering how to invert&lt;sup id=&quot;fnref:invert&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:invert&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; a binary tree.
I think it is paramount for programmers of this day and age to be competent in:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Communicating their ideas clearly and concisely.&lt;/li&gt;
  &lt;li&gt;Using existing abstractions, or creating ones if the need arises&lt;sup id=&quot;fnref:not&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:not&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. Abstractions entail vocabulary.&lt;/li&gt;
  &lt;li&gt;Writing documentation, decisions, and tradeoffs that are selected. Both for posterity‚Äôs sake and as a way to decant what was and was not important at that time.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I &lt;em&gt;suck&lt;/em&gt; at these three. But that‚Äôs ok because I can work on improving üòä.&lt;/p&gt;

&lt;h2 id=&quot;communicating-ideas&quot;&gt;Communicating Ideas&lt;/h2&gt;

&lt;p&gt;I have a lot of experiences where I have an idea for which I can‚Äôt put words. I imagine blobs, arrows, and boxes of how things need to interact. But when I want to communicate them I usually ramble on, fail to draw what I have in my head, and by and large, those concepts are communicated imperfectly. Or not at all.&lt;/p&gt;

&lt;p&gt;Communication &lt;strong&gt;is hard&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But I think that the ability to communicate is a skill that can be worked on. Improved upon. It needs time and practice. This blog is my training ground.
I don‚Äôt expect most of the posts here to be life-changing. But I hope that at some point I will have a groundbreaking idea that I‚Äôll want to share. If/when that time comes, I would like to be prepared. So I train, here.&lt;/p&gt;

&lt;h2 id=&quot;existing-abstractions&quot;&gt;Existing Abstractions&lt;/h2&gt;

&lt;p&gt;Writing also forces me to do some research, and expand my vocabulary (and therefore my pool of abstractions). Every new entry I explore existing material. See what others have written about it. And I‚Äôm often presented with like-minded individuals with far more experience in the subject matter, that have interesting choices of terminology.&lt;/p&gt;

&lt;p&gt;I‚Äôve had some ideas I wanted to explore but quickly found other resources that covered all that I wanted to explore, and then some. And even if I didn‚Äôt end up writing an entry, my knowledge did expand.&lt;/p&gt;

&lt;p&gt;I would love to be that &lt;em&gt;resource&lt;/em&gt; for someone else; that might be struggling to find the words for a problem, or get some guidance on a topic. Even if they disagree entirely on what I had to say, at least I can be a bad example.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;‚ÄúI‚Äôm not totally useless. I can be used as a bad example.‚Äù
‚Äï Victor Hugo, Les Mis√©rables&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;for-posteritys-sake&quot;&gt;For Posterity‚Äôs Sake&lt;/h2&gt;

&lt;p&gt;Finally and most purposeless for you, the reader, it is a way I can log my journey through life. I look forward to coming back to some old entry and think: ‚ÄúOh, how na√Øve young Joaco was‚Äù.
And if &lt;strong&gt;you&lt;/strong&gt; are me, in the future, then remember: you left a pair of socks in the top left drawer in the kitchen üß¶.&lt;/p&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:invert&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Why would anyone, in any domain, need to &lt;em&gt;invert&lt;/em&gt; a tree‚ÄΩ‚ÄΩ¬†&lt;a href=&quot;#fnref:invert&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:not&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;More often than not, abstractions over ‚Äúnew‚Äù ideas already exist. It is just too hard to find them in the &lt;em&gt;heat of the moment&lt;/em&gt;. We need some time to work on a particular problem that we start to see patterns and similarities the &lt;em&gt;new&lt;/em&gt; abstractions have with existing ones.¬†&lt;a href=&quot;#fnref:not&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Joaquin 'Florius' Azcarate</name></author><category term="rambling" /><summary type="html">I have much room for improvement where it comes to communicating. A tool I think can help me with it is writing a blog entry every so often about things I care about. This blog is just that. A training ground. My training ground.</summary></entry><entry><title type="html">Desire Driven Development</title><link href="https://blog.florius.com.ar/rambling/coding/2021/05/12/desire-driven-development/" rel="alternate" type="text/html" title="Desire Driven Development" /><published>2021-05-12T20:45:00+00:00</published><updated>2021-05-12T20:45:00+00:00</updated><id>https://blog.florius.com.ar/rambling/coding/2021/05/12/desire-driven-development</id><content type="html" xml:base="https://blog.florius.com.ar/rambling/coding/2021/05/12/desire-driven-development/">&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Desire&lt;/strong&gt; &lt;em&gt;verb [ T not continuous ] /d…™Ààza…™…ôr/&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;to want something, especially strongly.&lt;/p&gt;

  &lt;p&gt;‚Äî &lt;a href=&quot;https://dictionary.cambridge.org/dictionary/english/desire&quot;&gt;Cambridge dictionary&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Long have I heard and reaped the benefits of TDD (&lt;em&gt;Test Driven Development&lt;/em&gt;).
But I‚Äôm starting to sense that much of the material written and explained about TDD is by fanatics.
Don‚Äôt get me wrong. I see the value when learning a new tool to &lt;em&gt;overcompensate&lt;/em&gt;.
If you have never written a test before coding, then I‚Äôm all in for trying for a month or two to &lt;strong&gt;always&lt;/strong&gt; write a test before, write the least amount of code, and iterate.&lt;/p&gt;

&lt;p&gt;As with most tools, the implementation is as important as to knowing when to use it, and when not to&lt;sup id=&quot;fnref:hammers&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:hammers&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;I like the analogy of this learning as an infection. It may be because I‚Äôm writing this amid a pandemic, or that the experience was explained to me as being ‚Äútest-infected‚Äù. But either way, I think that &lt;strong&gt;TDD is a bacteria&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Not all bacteria are bad. Some are cute and cuddly&lt;sup id=&quot;fnref:acidophilus&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:acidophilus&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; and helps in our digestion. But some are mean and make out belly ache. In order to protect yourself, you need to build up an immunity. And there are, broadly speaking, two approaches:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The risky way is to contract the infection. Set out to TDD &lt;strong&gt;all the things&lt;/strong&gt; for a while. Don‚Äôt question it, just do it.&lt;/li&gt;
  &lt;li&gt;The hard way is to develop and apply a vaccine. Analyze when to apply the technique; how to simplify a problem or a part of the problem to attack it with TDD. This is &lt;strong&gt;difficult&lt;/strong&gt; to do right, but you can work at it little by little until you develop a potent response.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You &lt;strong&gt;can&lt;/strong&gt; have too much of a good thing.&lt;/p&gt;

&lt;p&gt;I‚Äôve come to terms with the idea that I no longer do TDD, but my take of it: &lt;strong&gt;Desire Driven Development&lt;/strong&gt;.
When discussing this blog entry, many people did agree that they also find a middle ground between strict TDD and testing&lt;sup id=&quot;fnref:testing&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:testing&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; code.&lt;/p&gt;

&lt;h2 id=&quot;desire-driven-development-by-example&quot;&gt;Desire-Driven Development by Example&lt;/h2&gt;

&lt;p&gt;If I want to become a famous author, I need to distill the idea down to a few, simple, easy to comprehend steps. Bonus points if they form an acronym.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start with your &lt;span style=&quot;font-size: 1.3em&quot;&gt;S&lt;/span&gt;cratchpad. This can be a new test suite. extending an existing one. If your language/technology allows for an interactive workspace or REPL, those too can work. Anywhere where you can code, and it can eventually be run.&lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;font-size: 1.3em&quot;&gt;A&lt;/span&gt;ssume that all the code is done already. All features implemented. No bugs. Well-designed, neat, and functional.&lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;font-size: 1.3em&quot;&gt;W&lt;/span&gt;rite down the acceptance criteria and what the expected outcome should be. Remember, all the classes, methods, functions that you want &lt;em&gt;exist&lt;/em&gt; already, and work exactly as you expect.&lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;font-size: 1.3em&quot;&gt;F&lt;/span&gt;ollow down the compile errors, missing methods, classes, runtime checks, et al. until your scratchpad does indeed work as you intended.
    &lt;ul&gt;
      &lt;li&gt;It might come the time where you‚Äôll need to update the criteria written in step 3. You are allowed to do so &lt;strong&gt;but&lt;/strong&gt; you need to first think hard about the change.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;(unchanged&lt;sup id=&quot;fnref:beck&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:beck&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;)&lt;/em&gt; &lt;span style=&quot;font-size: 1.3em&quot;&gt;R&lt;/span&gt;efactor as needed.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;sawfr&quot;&gt;S.A.W.F.R.&lt;/h3&gt;

&lt;p&gt;The linchpin of this technique is that I usually want to write and read code in the same way.
There is no feasible way that I can know what other people will understand when, in the future, they reason about my code. But I am constant&lt;sup id=&quot;fnref:theseus&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:theseus&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;. Then I should strive to produce code that astonished me the least&lt;sup id=&quot;fnref:POLA&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:POLA&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;. Hopefully, like minded individuals will be equally un-astonished.&lt;/p&gt;

&lt;p&gt;And bare in mind, this original code in step 3 has no concept of the inner workings, the details, the implementation. Pure and unadulterated issue-resolving code.&lt;/p&gt;

&lt;p&gt;If I gave you my 5 letter acronym&lt;sup id=&quot;fnref:acronym&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:acronym&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;, I can top it of with a 5 words summary:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;TDD, but lightweight&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-same-but-different-too&quot;&gt;The same, but different too&lt;/h2&gt;

&lt;p&gt;The major distinction between TDD and Desire Driven Development is that the latter focuses on the &lt;em&gt;outer most&lt;/em&gt; implementation. The technique spends a lot of time thinking, contemplating, and in awe of what the final implementation will feel like.
Anything that is needed to make step 3 possible, I don‚Äôt care about testing, or developing. I‚Äôll go so far as to say, I would like to have the most freedom of changing it at a whim. Writing tests for this inner layer makes change harder.&lt;/p&gt;

&lt;h2 id=&quot;hairy-step-4&quot;&gt;Hairy step 4.&lt;/h2&gt;

&lt;p&gt;It might come a time where I have a complicated piece of logic that I wished was already there. Then I usually &lt;em&gt;Shahrazad&lt;/em&gt;&lt;sup id=&quot;fnref:shahrazad&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:shahrazad&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt; and DDD again from that point onwards. But this is a conscious decision I make. I don‚Äôt zealously write tests for each intermediate abstraction.&lt;/p&gt;

&lt;p&gt;Sometimes, I need to change the beautiful code written in step 3. That is because my squishy human brain&lt;sup id=&quot;fnref:cognitive_dissonance&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:cognitive_dissonance&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt; can cope with the inherent vagueness of my desires, without considering the minutia required for it to be codable, but more often than not; when I realize that additional contextual information is needed (like an extra parameter; or a fatter way of building the environment), I look back at my original assumption and try to make that the default behavior, with as minimal code change to the original desire.&lt;/p&gt;

&lt;h2 id=&quot;the-water-shapes-the-rock-and-the-rock-shapes-the-water&quot;&gt;The water shapes the rock, and the rock shapes the water&lt;/h2&gt;

&lt;p&gt;Whilst writing this, I realized that I, personally, am a big fan of writing my custom DSL&lt;sup id=&quot;fnref:DSL&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:DSL&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;10&lt;/a&gt;&lt;/sup&gt;s.
I like languages that allow me to express these DSL with little to no extra syntax and I gravitate to statically typed languages with good inference and tooling.&lt;/p&gt;

&lt;p&gt;Bonus points when the language‚Äôs bottom&lt;sup id=&quot;fnref:perp&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:perp&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;11&lt;/a&gt;&lt;/sup&gt; helps the compiler insert error messages which are more appropriate to the context in which it appears&lt;sup id=&quot;fnref:undefined&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:undefined&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;12&lt;/a&gt;&lt;/sup&gt;, or in runtime when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;throw Error()&lt;/code&gt; caries with it the stack trace.&lt;/p&gt;

&lt;p&gt;These all are great characteristics to have for DDD.&lt;/p&gt;

&lt;h2 id=&quot;closing-thoughts&quot;&gt;Closing thoughts&lt;/h2&gt;

&lt;p&gt;The more I think about it; the more I‚Äôm convinced that DDD is less about &lt;strong&gt;D&lt;/strong&gt;evelopment, and more about &lt;strong&gt;D&lt;/strong&gt;esign. SO I might need to change the title at some point. But for the time being, I‚Äôll try to piggy back on TDD.
Maybe DDD is not for everyone or every use case, but it is how I usually code üò∫.&lt;/p&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:hammers&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;‚ÄúIf the only tool you have is a hammer, to treat everything as if it were a nail.‚Äù ‚Äî &lt;a href=&quot;https://en.wikipedia.org/wiki/Law_of_the_instrument&quot;&gt;Wikipedia&lt;/a&gt;¬†&lt;a href=&quot;#fnref:hammers&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:acidophilus&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;I‚Äôm not affiliated with Giant Microbes, but &lt;a href=&quot;https://www.giantmicrobes.com/us/products/acidophilus.html&quot;&gt;this plush&lt;/a&gt; just too cute to pass up.¬†&lt;a href=&quot;#fnref:acidophilus&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:testing&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;I don‚Äôt think that putting ‚Äútesting‚Äù and ‚ÄúTDD‚Äù at the two ends of the spectrum of writing code is a newfangled idea.¬†&lt;a href=&quot;#fnref:testing&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:beck&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;em&gt;‚Äú‚Äú‚Äúinspired‚Äù‚Äù‚Äù&lt;/em&gt; by Kent Beck‚Äôs Test-Driven Development by Example step 5: Refactor as needed.¬†&lt;a href=&quot;#fnref:beck&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:theseus&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;The Ship of Theseus is a thought experiment that raises the question of whether an object that has had all of its components replaced remains fundamentally the same object ‚Äî (Wikipedia)[https://en.wikipedia.org/wiki/Ship_of_Theseus]. I reckon for this particular aspect of my code reasoning abilities: I‚Äôll always be the same, or more knowledgeable.¬†&lt;a href=&quot;#fnref:theseus&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:POLA&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Principle_of_least_astonishment&quot;&gt;Principle of least astonishment&lt;/a&gt;¬†&lt;a href=&quot;#fnref:POLA&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:acronym&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Yes. It is an &lt;a href=&quot;https://en.wikipedia.org/wiki/Acronym&quot;&gt;acronym&lt;/a&gt;. It should be pronounced as a word. I won‚Äôt have another /g…™f/ vs /d í…™f/ pronunciation battle. So I‚Äôm deciding that the pronunciation of SAWFR is: /b…ëb/¬†&lt;a href=&quot;#fnref:acronym&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:shahrazad&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;There is a card in Magic: The Gathering‚Ñ¢ called &lt;a href=&quot;https://gatherer.wizards.com/pages/card/details.aspx?name=Shahrazad&quot;&gt;Shahrazad&lt;/a&gt; that represents a function call, with its stack and return point. It states: ‚ÄúPlayers play a Magic subgame, using their libraries as their decks. Each player who doesn‚Äôt win the subgame loses half their life, rounded up.‚Äù¬†&lt;a href=&quot;#fnref:shahrazad&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:cognitive_dissonance&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Cognitive dissonance occurs when a person holds contradictory ideas. ‚Äî (Wikipedia)[https://en.wikipedia.org/wiki/Cognitive_dissonance]¬†&lt;a href=&quot;#fnref:cognitive_dissonance&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:DSL&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Domain-specific_language&quot;&gt;Domain-specific language&lt;/a&gt;¬†&lt;a href=&quot;#fnref:DSL&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:perp&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Bottom (‚ä•) refers to a computation that never completes successfully.¬†&lt;a href=&quot;#fnref:perp&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:undefined&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Almost verbatim &lt;a href=&quot;https://hackage.haskell.org/package/base-4.15.0.0/docs/Prelude.html#v:undefined&quot;&gt;Haskell‚Äôs Prelude &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt; docs&lt;/a&gt;¬†&lt;a href=&quot;#fnref:undefined&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Joaquin 'Florius' Azcarate</name></author><category term="rambling" /><category term="coding" /><summary type="html">Long have I heard and reaped the benefits of Test Driven Development. But I'm starting to sense that much of the material written and explained about TDD is by fanatics. In this post I'll explore my own take on TDD, and the journey &amp;rarr; Desire Driven Development.</summary></entry><entry><title type="html">carbn</title><link href="https://blog.florius.com.ar/raving/2021/05/01/carbn/" rel="alternate" type="text/html" title="carbn" /><published>2021-05-01T06:39:00+00:00</published><updated>2021-05-01T06:39:00+00:00</updated><id>https://blog.florius.com.ar/raving/2021/05/01/carbn</id><content type="html" xml:base="https://blog.florius.com.ar/raving/2021/05/01/carbn/">&lt;p&gt;We are constantly trying to write code that easier for a human to comprehend. These high-level languages gave us the power of &lt;strong&gt;expression&lt;/strong&gt;. And we like this!&lt;/p&gt;

&lt;p&gt;We want more expression, and safety in the code we write; but we also want code that humans can understand and reason about.
So what if we re-think our current software stack? And have &lt;strong&gt;humans evaluate other human‚Äôs code&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://carbn.florius.com.ar/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;carbn&lt;/code&gt;&lt;/a&gt; is a Humans-as-a-Service, cutting edge technology that makes your code run in the distributed brains of our &lt;em&gt;agents&lt;/em&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I find it curious that things like a ‚ÄúNatural Language Processing‚Äù (NLP) exist to bridge the gap between humans and computers.
One of the most predominant libraries to work NLP might be the &lt;a href=&quot;https://www.nltk.org/&quot;&gt;Natural Language Toolkit&lt;/a&gt;. This is coded in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt;. A language that is interpreted by a program that is written in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;, that it in turn is compiled to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assembler&lt;/code&gt; and then run in the computer chip.&lt;/p&gt;

&lt;p&gt;In its purest form, we have myriad of abstractions piled up to get from:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Sorry I followed your minivan for thirty miles. I got caught up in the movie your kids were watching and wanted to see how it ends.&lt;/p&gt;&amp;mdash; Elizabeth Hackett (@LizHackett) &lt;a href=&quot;https://twitter.com/LizHackett/status/1004201775425966080?ref_src=twsrc%5Etfw&quot;&gt;June 6, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;to:&lt;/p&gt;
&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|| Tag       | Confidence ||
|| --------- | ---------- ||
|| Relatable |        89% ||
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-future-now&quot;&gt;The future. Now.&lt;/h2&gt;

&lt;p&gt;This is where &lt;strong&gt;carbn&lt;/strong&gt; comes in. Let‚Äôs rewrite the sentiment analysis in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;carbn&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-lisp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sentiment-analysis&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'Relatable&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'NotRelatable&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'FirstWorldProblems&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;'Undecidable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tweet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;LizHackett&quot;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1004201775425966080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For those more &lt;em&gt;Object&lt;/em&gt; oriented, this code is isomorphic to:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SentimentAnalysis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RELATABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NOT_RELATABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FIRST_WORLD_PROBLEMS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UNDECIDABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chooseOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Tweet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LizHackett&quot;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1004201775425966080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or my preferred way &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Iambic pentameter&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-iambic-pentameter&quot;&gt;√ó    /   √ó  /      √ó   /   √ó  /
when you do choose the sen‚àôti‚àôment

√ó    /   √ó     /     √ó  /   
from glo‚àôrious tweet by Liz*

√ó    /    √ó  /  √ó  /      √ó  /  
then clas‚àôsi‚àôfy it please be‚àôtween

√ó  /   √ó     /   √ó  /   √ó     /     √ó     /    √ó   
re‚àôlat‚àôable, not re‚àôlat‚àôable, first world prob‚àôlems

√ó  /    √ó  /  √ó   /
or just un‚àôde‚àôcid‚àôable

*Liz: @LizHackett/status/1004201775425966080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even though it is a bit more verbose, it is an order of magnitude faster than the other two flavors. We‚Äôll see why in the next section.&lt;/p&gt;

&lt;h2 id=&quot;softwares-humble-beginnings&quot;&gt;Software‚Äôs humble beginnings&lt;/h2&gt;

&lt;p&gt;Let‚Äôs start with a review of how we got here.&lt;/p&gt;

&lt;p&gt;In the beginning, humans wrote &lt;em&gt;machine code&lt;/em&gt;. A set of instructions that a computer would execute. We figured out that this was very powerful, but also very easy to make mistakes. We spend a lot of time thinking, and not a lot of time writing programs; as the economic balance was tipped in the machine‚Äôs favor.&lt;/p&gt;

&lt;p&gt;With the hard work of many people, we started to be able to have more widespread computational access, cheaper.
As humans would have it, we started writing more code. We soon understood that complex ideas needed a complex language. Something far beyond arithmetics and jumps, so we started the journey that started with compiled languages.&lt;/p&gt;

&lt;p&gt;Code that was more &lt;em&gt;abstract&lt;/em&gt;, but easier for a human to comprehend. These high-level languages gave us the power of &lt;strong&gt;expression&lt;/strong&gt;, in lieu of raw power. And we liked this!&lt;/p&gt;

&lt;p&gt;We &lt;em&gt;roughly&lt;/em&gt; went from getting a value from an array like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;movw    r0, #:lower16:A
movt    r0, #:upper16:A
; Address of ARRAY[3] = base addr + 3*1
ldrsb   r2, [r0, #3];  Load ARRAY[3] into r2

ARRAY:  .byte   11, 12, 13, 14, 15; byte typed initialized array
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this is a toy example, to keep things short. We hadn‚Äôt dealt with dynamic arrays, we know that we wanted the third position, so we could do some pre-emptive calculations on our head before writing this.&lt;/p&gt;

&lt;p&gt;To a higher abstraction language like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POSITION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Not only it is less code to wrap our heads around, but we can be a bit more certain than before, that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array&lt;/code&gt; is somewhat array-like. It still might not have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POSITION&lt;/code&gt; element; but given that we have the power of &lt;em&gt;expression&lt;/em&gt;, we can add more code to cover this case, like so:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;POSITION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;POSITION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Not content with this level of abstractions we have build many (maybe &lt;em&gt;too&lt;/em&gt; many&lt;sup id=&quot;fnref:list_lang&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:list_lang&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;) more layers of abstractions. We‚Äôve reached a level&lt;sup id=&quot;fnref:dependant_type&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:dependant_type&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; where we can have the compiler itself check this, that we had to humanly-think&lt;/p&gt;

&lt;div class=&quot;language-haskell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FixedSizeList&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;'3&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;POSITION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This code will not compile if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POSITION&lt;/code&gt; is greater than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt;, as the underlying list is of size &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We‚Äôve come so far! But I ponder that we can go &lt;strong&gt;further&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;None of these approaches shield us from coding &lt;em&gt;mistakes&lt;/em&gt;.
What if we &lt;strong&gt;actually&lt;/strong&gt; wanted the second item of a list, rather than the third? We didn‚Äôt have such a compiler‚Ä¶ that is, &lt;strong&gt;until now&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;from-silicone-to-carbn&quot;&gt;From silicone to carbn&lt;/h2&gt;
&lt;p&gt;So we come up with a simple question:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Why did we build layer upon layer of abstraction?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We fully understand the problem to solve. After all, our team was taught in the classic silicon-transistor-Von Neumann way of thinking about software and code. We want more expression, and safety in the code we write; but we also want code that humans can understand and reason about.&lt;/p&gt;

&lt;p&gt;We are stretching the problem space of the code in two very different directions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;On the one hand, we want to eventually get our code to get transformed into machine instructions&lt;/li&gt;
  &lt;li&gt;On the other, we care about expressiveness and correctness so that other humans can reason about the code we wrote.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So what if we cut the middle man? And have &lt;strong&gt;humans evaluate other human‚Äôs code&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;how-does-it-work&quot;&gt;How does &lt;strong&gt;it&lt;/strong&gt; work&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;carbn&lt;/code&gt; provides one major APIs to interact with the raw computing power of the platform: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/please/eval&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;--location&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--request&lt;/span&gt; GET &lt;span class=&quot;s1&quot;&gt;'https://carbn.florius.com.ar/please/eval'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt;   &lt;span class=&quot;s1&quot;&gt;'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3b3ciOiJZb3UgcmVhbGx5IHRob3VnaHQgdGhpcyB3b3VsZCB5aWVsZCBzb21ldGhpbmcgb3RoZXIgdGhhbiBhIPCfkqk_In0.jmlA3QI58jcRcWoL8Kc8o8wEbVrN9mKXK6S46bea-Y4'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt;   &lt;span class=&quot;s1&quot;&gt;'Content-Language: en-shakespearean'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt;   &lt;span class=&quot;s1&quot;&gt;'Content-Type: text/plain'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--data-raw&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'do add thirteen to twelve, many thanks'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Which might return:&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;carbn:computation&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:carbn=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://carbn.florius.com.ar/carbn.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;carbn:result&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;carbn:cubyhole&amp;gt;&lt;/span&gt;
            a749765e-aa57-11eb-bcbc-0242ac130002
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/carbn:cubyhole&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/carbn:result&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;carbn:success&amp;gt;&lt;/span&gt;
        true
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/carbn:success&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/carbn:computation&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This fires up two processes:
One that quickly returns a UUID of the computation. This is like a cubbyhole for your result.
And the other starts the orchestration, parsing, distribution, and eventual reduction of the result, which will at some point compute:&lt;/p&gt;
&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;25
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When the computation finished, you can retrieve the value by&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;--location&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--request&lt;/span&gt; GET &lt;span class=&quot;s1&quot;&gt;'https://carbn.florius.com.ar/please/give/a749765e-aa57-11eb-bcbc-0242ac130002'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Amazing&lt;/strong&gt;!&lt;/p&gt;

&lt;h2 id=&quot;backend---agents&quot;&gt;Backend - Agents&lt;/h2&gt;

&lt;p&gt;On the other side of the communication, we have an army of &lt;em&gt;agents&lt;/em&gt; that get a partial (but complete) piece of the request, that they can work with their incredibly powerful carbon-based brain.&lt;/p&gt;

&lt;p&gt;This is what an agent might see for your request:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îØ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ 1 ‚ñ≤ ‚îÇ Agent: J            ‚îÉ
‚îÉ 2 ‚ñ≤ ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î®    
‚îÉ 3 ‚ñ≤ ‚îÇ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó‚îÉ
‚îÉ 4   ‚îÇ‚ïë√ó  /   √ó    /    √ó ‚ïë‚îÉ
‚îÉ 5   ‚îÇ‚ïëdo add thir‚àôteen to‚ïë‚îÉ
‚îÉ 6   ‚îÇ‚ïë                   ‚ïë‚îÉ
‚îÉ 7   ‚îÇ‚ïë/       √ó    /    √ó‚ïë‚îÉ
‚îÉ     ‚îÇ‚ïëtwelve, many thanks‚ïë‚îÉ
‚îÉ     ‚îÇ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚îÉ
‚î†‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î®
‚îÉ $5k ‚îÇ&amp;gt; 25                 ‚îÉ
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚î∑‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As soon as they can type an answer, the cubbyhole will get filled.&lt;/p&gt;

&lt;h2 id=&quot;pricing&quot;&gt;Pricing&lt;/h2&gt;
&lt;p&gt;You will see in our pricing strategy that we are an order of magnitude more expensive than other cloud computing providers, we don‚Äôt have nearly as much up uptime as them, and our latency is much much higher, but can they:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Find off-by-one errors and correct them &lt;strong&gt;on the spot&lt;/strong&gt;?&lt;/li&gt;
  &lt;li&gt;Accommodate a wide variety of languages with zero compile cost?&lt;/li&gt;
  &lt;li&gt;Integrate perfectly with multiple &lt;em&gt;non-artificial&lt;/em&gt; neural networks?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Time is cheap. Correctness and perfection are what you would be paying for with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;carbn&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;del&gt;That and a lot of food for the agents. And sleeping accommodations. And healthcare. Some even get dental.&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&quot;faq&quot;&gt;F.A.Q&lt;/h2&gt;

&lt;h4 id=&quot;did-you-consider-how-similar-this-is-to-slavery&quot;&gt;Did you consider how similar this is to slavery?&lt;/h4&gt;
&lt;p&gt;Yes. But we are OK enslaving computers, why wouldn‚Äôt we be OK to do so with humans? How different are the two &lt;strong&gt;really&lt;/strong&gt;?&lt;/p&gt;

&lt;h4 id=&quot;is-the-evaluation-secure&quot;&gt;Is the evaluation secure?&lt;/h4&gt;
&lt;p&gt;The initial payload is first split into chunks for better parallelization and scoping.
We can‚Äôt reasonably give all the programs to just one &lt;em&gt;agent&lt;/em&gt;, so we split each stack so that they can work in the smallest, complete definition of a sub-problem. So you can structure your code in such a way as to limit exposure to secrets from inner agents.
We are currently implementing a tier of &lt;em&gt;agents&lt;/em&gt; that is more trustworthy than the rest; so they can be in charge of the final reduction. So that one agent might compute a payload, another a URL, and a &lt;em&gt;safe agent&lt;/em&gt; do the actual request with the proper secrets.&lt;/p&gt;

&lt;h4 id=&quot;what-is-doing-the-orchestration-filling-cubbyholes-responding-through-http-et-al&quot;&gt;What is doing the orchestration, filling cubbyholes, responding through HTTP, et al.?&lt;/h4&gt;
&lt;p&gt;We are indeed using outdated technologies to do this plumbing.
We are working very hard to bootstrap &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;carbn&lt;/code&gt; so it can run on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;carbn&lt;/code&gt;. For the time being, it is cheaper and more cost-effective to use unfashionable code.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is satire.&lt;/em&gt;&lt;/p&gt;

&lt;script src=&quot;https://crj691yl0124.statuspage.io/embed/script.js&quot;&gt;&lt;/script&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:list_lang&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_programming_languages&quot;&gt;Wikipedia :: List of programming languages&lt;/a&gt; with &lt;strong&gt;more&lt;/strong&gt; than 3 programming languages.¬†&lt;a href=&quot;#fnref:list_lang&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:dependant_type&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;‚Äú‚Ä¶ a dependent type is a type whose definition depends on a value‚Äù ‚Äì &lt;a href=&quot;https://en.wikipedia.org/wiki/Dependent_type&quot;&gt;Wikipedia :: Dependent type&lt;/a&gt;¬†&lt;a href=&quot;#fnref:dependant_type&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Joaquin 'Florius' Azcarate</name></author><category term="raving" /><summary type="html">We are constantly trying to write code that easier for a human to comprehend. These high-level languages gave us the power of expression. And we like this! We want more expression, and safety in the code we write; but we also want code that humans can understand and reason about. So what if we re-think our current software stack? And have humans evaluate other human‚Äôs code. carbn is a Humans-as-a-Service, cutting edge technology that makes your code run in the distributed brains of our agents.</summary></entry><entry><title type="html">Discovering Crystal</title><link href="https://blog.florius.com.ar/xpost/2021/04/15/discoverying-crystal/" rel="alternate" type="text/html" title="Discovering Crystal" /><published>2021-04-15T00:00:00+00:00</published><updated>2021-04-15T00:00:00+00:00</updated><id>https://blog.florius.com.ar/xpost/2021/04/15/discoverying-crystal</id><content type="html" xml:base="https://blog.florius.com.ar/xpost/2021/04/15/discoverying-crystal/">&lt;p&gt;&lt;em&gt;Original post can be found in the &lt;a href=&quot;https://apiumhub.com/tech-blog-barcelona/discovering-crystal-language/&quot;&gt;ApiumHub blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Another in the series. Check out other languages we‚Äôve explored in the past at:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://apiumhub.com/tech-blog-barcelona/discovering-vue-3-features/&quot;&gt;Discovering Vue 3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://apiumhub.com/tech-blog-barcelona/discovering-rust/&quot;&gt;Analyzing functionalities in Rust&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A bit of background about me before we begin our exploration of a new programming language.&lt;/p&gt;

&lt;p&gt;I‚Äôve been in love with programing languages for a couple of years now. I‚Äôm very interested in their semantics, the reasoning of why their designers chose to do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X&lt;/code&gt; over &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Y&lt;/code&gt;, and why they outright discarded &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Z&lt;/code&gt;. I‚Äôve done my fair share of DSLs in my tenure as a software developer for both fun and profit; so programming languages are the reasonable ‚Äústep up‚Äù to be interested in.&lt;/p&gt;

&lt;p&gt;As such I‚Äôm always in the lookout of up-and-coming languages.&lt;/p&gt;

&lt;h2 id=&quot;why-crystal&quot;&gt;Why Crystal?&lt;/h2&gt;

&lt;p&gt;Long time ago, far far away I was working with Ruby on Rails on a project with other very skilled Ruby and Rails developers. As many others working with Ruby, we liked it‚Äôs syntax, it‚Äôs ease of use, it‚Äôs dependencies (gems) but had some issues with it. Every programming language does.&lt;/p&gt;

&lt;p&gt;Honestly, performance was not my main driver to look to other programming languages, even though in many &lt;a href=&quot;https://github.com/kostya/benchmarks#readme&quot;&gt;benchmarks&lt;/a&gt; Crystal does excel.&lt;/p&gt;

&lt;p&gt;I was more concerned with safety and documentation. Let me explain.&lt;/p&gt;

&lt;h2 id=&quot;safety&quot;&gt;Safety&lt;/h2&gt;

&lt;p&gt;Whilst programming in Ruby, I many times had an error where an object I thought was a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash&lt;/code&gt; was actually a block, or a string was in fact a number. Many times a test would just fail or panic, and it took a minute to look at the trace, maybe put a breakpoint. Pry open the execution. Realize there was a branch of the code that did not set a key in an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;options&lt;/code&gt; parameter that got passed along and I did not account for. Fix it and continue coding.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined method ‚Äòfoo‚Äô for nil:NilClass&lt;/code&gt; was particularly recurring in my development cycle.&lt;/p&gt;

&lt;h2 id=&quot;documentation&quot;&gt;Documentation&lt;/h2&gt;

&lt;p&gt;Here I‚Äôm not referring to the actual docs I can find in Ruby Doc but rather how much information can the IDE help me out with. I‚Äôm a big proponent of making tools to help development, but having to hydrate an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;options&lt;/code&gt; hash to send to a gem‚Äôs method and having to yield to look at the gem‚Äôs code to understand what values are even available, is a big reason why I enjoy typed programing languages so much.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FooConfiguration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FooConfiguration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;‚Ä¶&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At a glance (and with IDE support), one can deduce that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo&lt;/code&gt;‚Äôs options have a required &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bar&lt;/code&gt; string, and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;biz&lt;/code&gt; that defaults to 3. Where as a similar code in Ruby could look like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ‚Ä¶&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;enc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encoding&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Oh, so `bar` is a string. Gotcha!&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ... &lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;biz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# if `biz` is falsey, then `3`. Can I send a boolean? Oh, no, it `#.times` it, so it is a number. ü§ï &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Both these pain points were addressed, interestingly enough, by the same approach: &lt;em&gt;Types&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In Crystal there is a very smart, very competent compiler that keeps track of the busy work of knowing what methods any reference might have, if it is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nil&lt;/code&gt; or what can and can‚Äôt be done to an object. This was a godsend.&lt;/p&gt;

&lt;p&gt;As luck would have it, I was also in close contact with some very vociferous advocate of Crystal. You can imagine, with the tagline: &lt;em&gt;‚ÄúFast as C, Slick as Ruby‚Äù&lt;/em&gt;, I was hooked.&lt;/p&gt;

&lt;p&gt;My breakout project, the moment I really ‚Äúgot‚Äù Crystal was when we needed some dashboard like solution. We realized we had built too many internal tools and no one place to cluster them all. For whatever reason we didn‚Äôt want some static lame webpage. We decided to roll out our own. Some YAML parsing, some macro goodness and a lot of type safety later we had it running. Adding apps was simple and a CI build made sure that all the things were correctly wired. It was a small project, probably way overengineered; but onboarding another Ruby developer was incredibly simple. That was a good selling point.&lt;/p&gt;

&lt;h2 id=&quot;why-crystal-now&quot;&gt;Why Crystal now?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;That‚Äôs leading the subject, your honor!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Recently‚Ñ¢ the nice people of Crystal announced &lt;a href=&quot;https://crystal-lang.org/2021/03/22/crystal-1.0-what-to-expect.html&quot;&gt;the release of Crystal 1.0&lt;/a&gt; - Production ready, stable and useful standard library all in a tight little bundle; so if it was ever the time to seriously look at Crystal; I would say today is the day.
Other awesome features
Type ergonomics&lt;/p&gt;

&lt;p&gt;We talked about type safety, and some might have rolled your eyes expecting a very verbose way of writing the code; but let‚Äôs not forget one of the key drivers of Crystal is to have a similar syntax to Ruby. A dynamically typed language. So both:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;                                                                  	 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;biz&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;biz&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bar&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invoke_biz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;biz&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;invoke_biz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; foo&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;invoke_biz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; bar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Is both valid Ruby and Crystal. You can try that out in your browser in &lt;a href=&quot;https://play.crystal-lang.org/#/r/apl0&quot;&gt;the crystal playground here!&lt;/a&gt; No type to be seen, thanks to the incredible type inference that comes with Crystal‚Äôs compiler. There is much cool things about it that I would need entire new blog posts to write, luckily &lt;a href=&quot;https://crystal-lang.org/reference/index.html&quot;&gt;Crystal‚Äôs book&lt;/a&gt; does a good job covering the basics: &lt;a href=&quot;https://crystal-lang.org/reference/syntax_and_semantics/type_inference.html&quot;&gt;Type inference&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;yaml--json--xml&quot;&gt;YAML / JSON / XML&lt;/h2&gt;

&lt;p&gt;It‚Äôs amazing how useful it is to have such a robust parsing library already in the standard library, no need to deal with extraneous dependencies to read a configuration file, or write one out.&lt;/p&gt;

&lt;div class=&quot;language-crystal highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;yaml&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;YAML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Serializable&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;biz&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Float64&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;YAML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Serializable&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That‚Äôs all the code needed to parse something like&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hi!&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;biz&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3.2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The same holds for JSON and XML.
I find it baffling how, when reading and writing configuration is so easy, much more customization I allow when developing tools with Crystal.&lt;/p&gt;

&lt;h2 id=&quot;de-centralized-shards&quot;&gt;De-centralized shards&lt;/h2&gt;

&lt;p&gt;Maybe as I‚Äôm getting older, I‚Äôm getting more paranoid about where my dependencies (which run, for all intents and purposes, arbitrary code that gets deployed on my behalf) are fetched; but I can‚Äôt/won‚Äôt wait for a cabal to approve a new dependency. Being able to choose either a local file or any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt; provider gives me a bit more peace of mind.&lt;/p&gt;

&lt;h2 id=&quot;the-logo-its-alive-its-moving-its-alive-its-alive&quot;&gt;The logo‚Ä¶ It‚Äôs alive, it‚Äôs moving, it‚Äôs alive, it‚Äôs alive!&lt;/h2&gt;

&lt;p&gt;The black logo in the &lt;a href=&quot;https://crystal-lang.org/&quot;&gt;Crystal‚Äôs home page&lt;/a&gt; is interactive. You can click and spin it around.
At first glance, one can brush off that fact, thinking it is superfluous and useless; but I would urge you to wander: Would a &lt;em&gt;bad language&lt;/em&gt;&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; such a polished home page, such well &lt;a href=&quot;https://crystal-lang.org/reference/getting_started/&quot;&gt;written tutorials&lt;/a&gt;, such &lt;a href=&quot;https://crystal-lang.org/community/&quot;&gt;active community&lt;/a&gt;? ü§î&lt;/p&gt;

&lt;h2 id=&quot;where-to-now&quot;&gt;Where to now?&lt;/h2&gt;

&lt;p&gt;If you are interested, you can keep learning Crystal with &lt;a href=&quot;https://crystal-lang.org/reference/getting_started/&quot;&gt;the book&lt;/a&gt; and the &lt;a href=&quot;https://play.crystal-lang.org/#/cr&quot;&gt;online playground&lt;/a&gt;. Have a look at the &lt;a href=&quot;https://github.com/veelenga/awesome-crystal&quot;&gt;awesome-crystal&lt;/a&gt; compiled list of things, some might inspire you in your current or next project. &lt;a href=&quot;https://crystal-lang.org/community/&quot;&gt;Reach out&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;reader‚Äôs interpretation of what a bad language might be.¬†&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Joaquin 'Florius' Azcarate</name></author><category term="xpost" /><summary type="html">I was working with Ruby on Rails on a project with other very skilled Ruby and Rails developers. As many others working with Ruby, we liked it‚Äôs syntax, it‚Äôs ease of use, it‚Äôs dependencies (gems) but had some issues with it. Every programming language does. As luck would have it, I was also in close contact with some very vociferous advocate of Crystal. You can imagine, with the tagline: ‚ÄúFast as C, Slick as Ruby‚Äù, I was hooked.</summary></entry><entry><title type="html">Deckchecks, Heuristics, and Decision Trees</title><link href="https://blog.florius.com.ar/mtg/2021/04/11/deckchecks-heuristics-and-decision-trees/" rel="alternate" type="text/html" title="Deckchecks, Heuristics, and Decision Trees" /><published>2021-04-11T15:45:00+00:00</published><updated>2021-04-11T15:45:00+00:00</updated><id>https://blog.florius.com.ar/mtg/2021/04/11/deckchecks-heuristics-and-decision-trees</id><content type="html" xml:base="https://blog.florius.com.ar/mtg/2021/04/11/deckchecks-heuristics-and-decision-trees/">&lt;p&gt;Recently I had the pleasure of attending an online conference&lt;sup id=&quot;fnref:covid&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:covid&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;: &lt;strong&gt;Practical Deck Checks with Oli Bird&lt;/strong&gt; where they talked about the specifics of when, why we do deckchecks&lt;sup id=&quot;fnref:deckchecks&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:deckchecks&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, and how. The latter point sparked some ideation.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How do we chose the strategy by which we deck check?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Are we consciously choosing the best strategy for each deck check? Are we leveraging all the tools at our disposal to make such a decision?&lt;/p&gt;

&lt;p&gt;In this post, I want to explore such questions; as at first glance, the answer seems to be: &lt;strong&gt;no&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;Play around with the &lt;strong&gt;&lt;a href=&quot;https://jazcarate.github.io/deck-partitioner/&quot;&gt;Deck Partitioner&lt;/a&gt;&lt;/strong&gt; tool. Paste a deck. See the cost of each partition strategy and see if your heuristic matches my hypothesis of costs.&lt;/p&gt;

&lt;h2 id=&quot;what-are-deck-checks&quot;&gt;What &lt;em&gt;are&lt;/em&gt; deck checks&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Feel free to skip this section if you are already versed in what they are&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In Magic: The Gathering‚Ñ¢‚Äôs tournaments, players are expected not to cheat.
And there are people (called &lt;em&gt;judges&lt;/em&gt;) that train to, in addition to other more noble and customer-caring actions, prevent that from happening.
One of the tools judges employ to thwart attempts to cheat is to require players to write down what cards they will be playing within a particular tournament or section of the tournament, and routinely checked that the cards they are playing with are those that they settled from the start.&lt;/p&gt;

&lt;p&gt;Judges must perform these checks the fastest way possible to not delay the tournament. As such, they developed a myriad of techniques.
In this blog post, I would like to explore their inner workings, propose a hypothesis on why they might work in some situations but not others, consider unexplored alternatives, and hopefully build a heuristic on what method is better for each circumstance.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Side note: It feels so weird writing about a deck check amidst a pandemic; when the last one I did was well over a year ago, and who knows how we‚Äôll perform them in the future. The mere thought of manipulating other human being‚Äôs cards is bizarre. Time will tell‚Ä¶&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;techniques&quot;&gt;Techniques&lt;/h2&gt;
&lt;p&gt;I‚Äôll briefly go through two ways I know judges do deck checks.
I highly recommend watching the video from Federico Donner where he goes in-depth with a visual aide on many other techniques &lt;em&gt;(even though it is in Spanish, it has subtitles)&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;embed-container&quot;&gt;
    &lt;iframe title=&quot;YouTube video - T√©cnicas de deckcheck&quot; src=&quot;https://www.youtube.com/embed/EovGP2dB6QU&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&quot;1-type-separation&quot;&gt;1. Type separation&lt;/h3&gt;
&lt;p&gt;Split the deck by dividing it into two piles: lands and non-lands.
Then proceed to split each pile by card name.
Afterward go through the decklist in order and verify the quantity is correct.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;land / non-land&quot; src=&quot;/assets/f5327f-e530e1eb223835eb3af5fa1faaf0c8e2fa36b8a98d4839fb8822251ffa59d6749faa5da54ab8a30640da7e9fc38f7c7978b6c3caa7bcfc3e8c9f29d4aa0bb009.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-mana-value-separation&quot;&gt;2. Mana value&lt;sup id=&quot;fnref:mana_value&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:mana_value&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; separation&lt;/h3&gt;
&lt;p&gt;Split the deck into piles, categorized by mana value.
Then go through the decklist and retrieve the cards with the required quantity from the appropriate pile.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;by mana value&quot; src=&quot;/assets/52e2be-aafb9a6e48b89492bb6179310969f49901e00a893ede9c8ce190d0ce6bea7450920e50ad09637bc05257ae5f7b7bbe2935e0ba74ddb1740569c7d8745b14c5ea.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This got me thinking, to perform a deck check, there are two &lt;strong&gt;critical&lt;/strong&gt; pieces of information that we need:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A sorted deck&lt;/li&gt;
  &lt;li&gt;and a decklist.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Technique number 1 starts with a sorted deck and then uses the list. Technique number 2 starts to sort a deck, and then uses the decklist to make the remaining sorting easier.
Thus I wondered: Is there something we can do with just the list? Considering we have unlimited access to a list, and &lt;em&gt;(baring the opportunity cost of not being on the floor)&lt;/em&gt; looking at the list has no impact on the timings of a tournament.&lt;/p&gt;

&lt;p&gt;It then dawned upon me that I know some judges that do a different permutation when checking &lt;a href=&quot;https://www.mtggoldfish.com/archetype/tron&quot;&gt;Modern‚Äôs Tron&lt;/a&gt; than &lt;a href=&quot;https://www.mtggoldfish.com/archetype/burn-a2dd1132-5301-4882-907a-7b668da3b58a&quot;&gt;Modern‚Äôs Burn&lt;/a&gt; for example.&lt;/p&gt;

&lt;p&gt;Their heuristics tell them that separating Burn by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; is less efficient than separating by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mana value&lt;/code&gt;. And separating by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;color&lt;/code&gt; is all but useless.
Most lists run four copies of each card, and the mana values are very tightly packed. Whereas Tron benefits greatly by doing the first split by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lands / non-lands&lt;/code&gt;, and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;color&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This got me thinking, it would be great to devise a mathematical model of deck sorting to figure out what the best approach to separating a deck is. I feel we &lt;strong&gt;under-use&lt;/strong&gt; the availability of the decklist, so having a clear plan ahead of actually getting the deck in our hands can prove highly effective.&lt;/p&gt;

&lt;h2 id=&quot;defining-the-problem-statement&quot;&gt;Defining the problem statement&lt;/h2&gt;
&lt;p&gt;I want to find a mathematical formula to aid me in minimizing the time of performing a deck check.
As I‚Äôm not a good mathematician. But I know a thing or two about &lt;em&gt;coding&lt;/em&gt;. I reckon I can compute for a deck every single permutation of partition strategy; and with a way of putting a numeric value on the &lt;em&gt;cost&lt;/em&gt; of each arrangement, select the optimal.&lt;/p&gt;

&lt;p&gt;To do so, we‚Äôll have to establish some common names and operations, and abstract away some details like ‚Äúhow much desk space does each technique use up‚Äù, or how to deal with a sideboard-ed deck.&lt;/p&gt;

&lt;p&gt;Given those abstractions, we can reframe the problem of checking a deck, to one much closer to ~botanics~programming: Constructing a tree.
In my model, the process of deck checking is equivalent to building a tree, where each node holds an intermediate pile of cards that have been split by some criteria. And the leaves are piles of same-name cards ready to be cross-checked with a decklist.&lt;/p&gt;

&lt;p&gt;To construct the procedure tree you start with a &lt;strong&gt;node&lt;/strong&gt; with all the cards. Then for each category you want to &lt;strong&gt;classify&lt;/strong&gt;&lt;sup id=&quot;fnref:partition&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:partition&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; them, you split into &lt;strong&gt;sub-nodes&lt;/strong&gt; with the cards that match that criteria. This way you &lt;em&gt;learn&lt;/em&gt; more about each pile.&lt;/p&gt;

&lt;p&gt;This test may be binary (e.g.: land vs non-land) or not (e.g.: by mana value, or by color).
This process is repeated until cards are &lt;strong&gt;classified&lt;/strong&gt; by name. Further sub-classifications are pointless, as cards with the same name will &lt;em&gt;(by definition)&lt;/em&gt; have the same attributes.&lt;/p&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;We‚Äôll be using just a deck of 16 cards to make things concise:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;4 Primeval Titan
2 Azusa, Lost but Seeking
4 Amulet of Vigor
2 Valakut, the Molten Pinnacle
4 Simic Growth Chamber
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Remember you can &lt;em&gt;play along&lt;/em&gt; in the &lt;a href=&quot;https://jazcarate.github.io/deck-partitioner/&quot;&gt;Deck Partitioner&lt;/a&gt; web.&lt;/p&gt;

&lt;h3 id=&quot;1-type-separation-tree&quot;&gt;1. Type separation tree&lt;/h3&gt;
&lt;p&gt;Start with the whole deck.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;no classification&quot; src=&quot;/assets/979e36-dcf2a686afe3e60a7b0b61e6edff95da779d8149eb2582c7a84992f7a6597042f13be544294c98f8b2f19ebe86ab6ad42f74aff3a18ccfa0c1b14991f0ded713.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We‚Äôll represent this deck, unclassified, like so:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚îå‚îÄ‚îÄa card
‚îÇ  a card
‚îÇ  a card
‚îÇ  a card
‚îÇ  a card
‚îÇ  a card
‚îÇ  a card
‚îÇ  a card
‚îÇ  a card
‚îÇ  a card
‚îÇ  a card
‚îÇ  a card
‚îÇ  a card
‚îÇ  a card
‚îÇ  a card
‚îî‚îÄ‚îÄa card
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We know nothing about these cards yet. So we proceed by the deck into a lands and a non-lands pile.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;land / non-land&quot; src=&quot;/assets/f5327f-e530e1eb223835eb3af5fa1faaf0c8e2fa36b8a98d4839fb8822251ffa59d6749faa5da54ab8a30640da7e9fc38f7c7978b6c3caa7bcfc3e8c9f29d4aa0bb009.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚îå‚îÄ‚îÄ‚îå‚îÄ‚îÄNon-Land
‚îÇ  ‚îÇ  Non-Land
‚îÇ  ‚îÇ  Non-Land
‚îÇ  ‚îÇ  Non-Land
‚îÇ  ‚îÇ  Non-Land
‚îÇ  ‚îÇ  Non-Land
‚îÇ  ‚îÇ  Non-Land
‚îÇ  ‚îÇ  Non-Land
‚îÇ  ‚îÇ  Non-Land
‚îÇ  ‚îî‚îÄ‚îÄNon-Land
‚îÇ  
‚îÇ  ‚îå‚îÄ‚îÄLand
‚îÇ  ‚îÇ  Land
‚îÇ  ‚îÇ  Land
‚îÇ  ‚îÇ  Land
‚îÇ  ‚îÇ  Land
‚îî‚îÄ‚îÄ‚îî‚îÄ‚îÄLand
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We now know more about each pile, but not enough to verify the deck. So we continue to split each pile by card name.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;by name&quot; src=&quot;/assets/b24d72-31acbe364046b110675b80dc141591cd52082ce59a2d050b742d4a2f9ab1267fa028bf22b39a71541c778ac2a599b2af3a43c4625db51fb7dd771e5fc89de1b1.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚îå‚îÄ‚îÄ‚îå‚îÄ‚îÄ‚îå‚îÄ‚îÄNon-Land   Primeval Titan
‚îÇ  ‚îÇ  ‚îÇ  Non-Land   Primeval Titan
‚îÇ  ‚îÇ  ‚îÇ  Non-Land   Primeval Titan
‚îÇ  ‚îÇ  ‚îî‚îÄ‚îÄNon-Land   Primeval Titan
‚îÇ  ‚îÇ  
‚îÇ  ‚îÇ  ‚îå‚îÄ‚îÄNon-Land   Azusa, Lost but Seeking
‚îÇ  ‚îÇ  ‚îî‚îÄ‚îÄNon-Land   Azusa, Lost but Seeking
‚îÇ  ‚îÇ  
‚îÇ  ‚îÇ  ‚îå‚îÄ‚îÄNon-Land   Amulet of Vigor
‚îÇ  ‚îÇ  ‚îÇ  Non-Land   Amulet of Vigor
‚îÇ  ‚îÇ  ‚îÇ  Non-Land   Amulet of Vigor
‚îÇ  ‚îî‚îÄ‚îÄ‚îî‚îÄ‚îÄNon-Land   Amulet of Vigor
‚îÇ  
‚îÇ  ‚îå‚îÄ‚îÄ‚îå‚îÄ‚îÄLand       Valakut, the Molten Pinnacle
‚îÇ  ‚îÇ  ‚îî‚îÄ‚îÄLand       Valakut, the Molten Pinnacle
‚îÇ  ‚îÇ  
‚îÇ  ‚îÇ  ‚îå‚îÄ‚îÄLand       Simic Growth Chamber
‚îÇ  ‚îÇ  ‚îÇ  Land       Simic Growth Chamber
‚îÇ  ‚îÇ  ‚îÇ  Land       Simic Growth Chamber
‚îî‚îÄ‚îÄ‚îî‚îÄ‚îÄ‚îî‚îÄ‚îÄLand       Simic Growth Chamber
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-type-separation-tree&quot;&gt;2. Type separation tree&lt;/h3&gt;
&lt;p&gt;Again start with the whole deck.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;no classification&quot; src=&quot;/assets/979e36-dcf2a686afe3e60a7b0b61e6edff95da779d8149eb2582c7a84992f7a6597042f13be544294c98f8b2f19ebe86ab6ad42f74aff3a18ccfa0c1b14991f0ded713.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And once more, the same text representation, with no information whatsoever:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚îå‚îÄ‚îÄa card
‚îÇ  a card
‚îÇ  a card
‚îÇ  a card
‚îÇ  a card
‚îÇ  a card
‚îÇ  a card
‚îÇ  a card
‚îÇ  a card
‚îÇ  a card
‚îÇ  a card
‚îÇ  a card
‚îÇ  a card
‚îÇ  a card
‚îÇ  a card
‚îî‚îÄ‚îÄa card
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Afterward, split each pile by type.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;by type&quot; src=&quot;/assets/21ad13-b6a54c666becc67703d10fef825f4c0b5e988e43426662e7d3f3ed3e8b25c683c8387e271dd796b77e0418901f40ec03858cca025c071873a5909bb9b3d5cee7.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚îå‚îÄ‚îÄ‚îå‚îÄ‚îÄCreature
‚îÇ  ‚îÇ  Creature
‚îÇ  ‚îÇ  Creature
‚îÇ  ‚îÇ  Creature
‚îÇ  ‚îÇ  Creature
‚îÇ  ‚îî‚îÄ‚îÄCreature
‚îÇ  
‚îÇ  ‚îå‚îÄ‚îÄArtifact
‚îÇ  ‚îÇ  Artifact
‚îÇ  ‚îÇ  Artifact
‚îÇ  ‚îî‚îÄ‚îÄArtifact
‚îÇ  
‚îÇ  ‚îå‚îÄ‚îÄLand
‚îÇ  ‚îÇ  Land
‚îÇ  ‚îÇ  Land
‚îÇ  ‚îÇ  Land
‚îÇ  ‚îÇ  Land
‚îî‚îÄ‚îÄ‚îî‚îÄ‚îÄLand
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And finally each by card name.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;by name&quot; src=&quot;/assets/b24d72-31acbe364046b110675b80dc141591cd52082ce59a2d050b742d4a2f9ab1267fa028bf22b39a71541c778ac2a599b2af3a43c4625db51fb7dd771e5fc89de1b1.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚îå‚îÄ‚îÄ‚îå‚îÄ‚îÄ‚îå‚îÄ‚îÄCreature   Primeval Titan
‚îÇ  ‚îÇ  ‚îÇ  Creature   Primeval Titan
‚îÇ  ‚îÇ  ‚îÇ  Creature   Primeval Titan
‚îÇ  ‚îÇ  ‚îî‚îÄ‚îÄCreature   Primeval Titan
‚îÇ  ‚îÇ 
‚îÇ  ‚îÇ  ‚îå‚îÄ‚îÄCreature   Azusa, Lost but Seeking
‚îÇ  ‚îî‚îÄ‚îÄ‚îî‚îÄ‚îÄCreature   Azusa, Lost but Seeking
‚îÇ   
‚îÇ  ‚îå‚îÄ‚îÄ‚îå‚îÄ‚îÄArtifact   Amulet of Vigor
‚îÇ  ‚îÇ  ‚îÇ  Artifact   Amulet of Vigor
‚îÇ  ‚îÇ  ‚îÇ  Artifact   Amulet of Vigor
‚îÇ  ‚îî‚îÄ‚îÄ‚îî‚îÄ‚îÄArtifact   Amulet of Vigor
‚îÇ   
‚îÇ  ‚îå‚îÄ‚îÄ‚îå‚îÄ‚îÄLand       Valakut, the Molten Pinnacle
‚îÇ  ‚îÇ  ‚îî‚îÄ‚îÄLand       Valakut, the Molten Pinnacle
‚îÇ  ‚îÇ   
‚îÇ  ‚îÇ  ‚îå‚îÄ‚îÄLand       Simic Growth Chamber
‚îÇ  ‚îÇ  ‚îÇ  Land       Simic Growth Chamber
‚îÇ  ‚îÇ  ‚îÇ  Land       Simic Growth Chamber
‚îî‚îÄ‚îÄ‚îî‚îÄ‚îÄ‚îî‚îÄ‚îÄLand       Simic Growth Chamber
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The result is, as to be expected, the same.&lt;/p&gt;

&lt;h2 id=&quot;evaluation&quot;&gt;Evaluation&lt;/h2&gt;
&lt;p&gt;Now that we know how to construct any strategy of partitions, we need to decide which is &lt;strong&gt;the best&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In my model, I pose that the cost of each classification &lt;strong&gt;is&lt;/strong&gt; associated with the number of &lt;em&gt;piles&lt;/em&gt;&lt;sup id=&quot;fnref:partition:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:partition&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; generated by the test.
It is faster to decide&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;land&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;non-land&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;than&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mana value=0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mana value=1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mana value=2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not only there is much more brainpower needed to parse a card into these categories, but the physical act of placing the card in the appropriate pile is costly. This action of deciding each pile is then multiplied for how many cards need to be sorted. It does not take the same time to sort 10 cards as 100. But I reckon that the cost is linearly proportional, as it is just doing the same classification over and over again.&lt;/p&gt;

&lt;p&gt;So to go from&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚îå‚îÄ‚îÄa card  &amp;gt;&amp;gt;  ‚îå‚îÄ‚îÄ‚îå‚îÄ‚îÄNon-Land
‚îÇ  a card  &amp;gt;&amp;gt;  ‚îÇ  ‚îÇ  Non-Land
‚îÇ  a card  &amp;gt;&amp;gt;  ‚îÇ  ‚îÇ  Non-Land
‚îÇ  a card  &amp;gt;&amp;gt;  ‚îÇ  ‚îÇ  Non-Land
‚îÇ  a card  &amp;gt;&amp;gt;  ‚îÇ  ‚îÇ  Non-Land
‚îÇ  a card  &amp;gt;&amp;gt;  ‚îÇ  ‚îÇ  Non-Land
‚îÇ  a card  &amp;gt;&amp;gt;  ‚îÇ  ‚îÇ  Non-Land
‚îÇ  a card  &amp;gt;&amp;gt;  ‚îÇ  ‚îÇ  Non-Land
‚îÇ  a card  &amp;gt;&amp;gt;  ‚îÇ  ‚îÇ  Non-Land
‚îÇ  a card  &amp;gt;&amp;gt;  ‚îÇ  ‚îî‚îÄ‚îÄNon-Land
‚îÇ              ‚îÇ  
‚îÇ  a card  &amp;gt;&amp;gt;  ‚îÇ  ‚îå‚îÄ‚îÄLand
‚îÇ  a card  &amp;gt;&amp;gt;  ‚îÇ  ‚îÇ  Land
‚îÇ  a card  &amp;gt;&amp;gt;  ‚îÇ  ‚îÇ  Land
‚îÇ  a card  &amp;gt;&amp;gt;  ‚îÇ  ‚îÇ  Land
‚îÇ  a card  &amp;gt;&amp;gt;  ‚îÇ  ‚îÇ  Land
‚îî‚îÄ‚îÄa card  &amp;gt;&amp;gt;  ‚îî‚îÄ‚îÄ‚îî‚îÄ‚îÄLand
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We need to go through each card (\(16\)) and with each one decide between one of two buckets. Thus the total cost is \(16 \times 2 = 32\).
Whereas to classify like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚îå‚îÄ‚îÄa card  &amp;gt;&amp;gt;  ‚îå‚îÄ‚îÄ‚îå‚îÄ‚îÄCreature
‚îÇ  a card  &amp;gt;&amp;gt;  ‚îÇ  ‚îÇ  Creature
‚îÇ  a card  &amp;gt;&amp;gt;  ‚îÇ  ‚îÇ  Creature
‚îÇ  a card  &amp;gt;&amp;gt;  ‚îÇ  ‚îÇ  Creature
‚îÇ  a card  &amp;gt;&amp;gt;  ‚îÇ  ‚îÇ  Creature
‚îÇ  a card  &amp;gt;&amp;gt;  ‚îÇ  ‚îî‚îÄ‚îÄCreature
‚îÇ              ‚îÇ  
‚îÇ  a card  &amp;gt;&amp;gt;  ‚îÇ  ‚îå‚îÄ‚îÄArtifact
‚îÇ  a card  &amp;gt;&amp;gt;  ‚îÇ  ‚îÇ  Artifact
‚îÇ  a card  &amp;gt;&amp;gt;  ‚îÇ  ‚îÇ  Artifact
‚îÇ  a card  &amp;gt;&amp;gt;  ‚îÇ  ‚îî‚îÄ‚îÄArtifact
‚îÇ              ‚îÇ
‚îÇ  a card  &amp;gt;&amp;gt;  ‚îÇ  ‚îå‚îÄ‚îÄLand
‚îÇ  a card  &amp;gt;&amp;gt;  ‚îÇ  ‚îÇ  Land
‚îÇ  a card  &amp;gt;&amp;gt;  ‚îÇ  ‚îÇ  Land
‚îÇ  a card  &amp;gt;&amp;gt;  ‚îÇ  ‚îÇ  Land
‚îÇ  a card  &amp;gt;&amp;gt;  ‚îÇ  ‚îÇ  Land
‚îî‚îÄ‚îÄa card  &amp;gt;&amp;gt;  ‚îî‚îÄ‚îÄ‚îî‚îÄ‚îÄLand
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;we again have to decide \(16\) times, but now on four possible classifications, so the cost is much higher (&lt;em&gt;twice as high&lt;/em&gt;): \(16  \times 4 = 64\). But we end with smaller buckets.&lt;/p&gt;

&lt;p&gt;The entire cost of a sorting technique then is adding up all the costs of each node‚Äôs classification cost &lt;em&gt;(in the &lt;a href=&quot;https://jazcarate.github.io/deck-partitioner/&quot;&gt;web&lt;/a&gt; you can mouse over each tree section to get the drill of the cost. And the total cost at the bottom of the page)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I did not add a cost associated with how many levels of the classification there are, as I think it is small enough to be ignored. Though in my limited testing, it does cause fatigue if above a certain number of classifications.&lt;/p&gt;

&lt;p&gt;Going back to the Modern Burn, the math seems to agree with their heuristic, and the most cost-efficient partition is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;by mana value &amp;gt; by name&lt;/code&gt;; whereas for Tron, the most efficient way of splitting is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;by land/non-land &amp;gt; by color &amp;gt; by type &amp;gt; by name&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;request-for-help&quot;&gt;Request for help&lt;/h2&gt;

&lt;p&gt;I would &lt;strong&gt;love&lt;/strong&gt; other people to experiment and time themselves to figure out if my hypothesis does hold; or if the cost of further sub-partitions is not, in fact, negligible. But rather scales exponentially each new level. I‚Äôm very curious.&lt;/p&gt;

&lt;p&gt;If you want to help me out fine-tuning my &lt;em&gt;cost&lt;/em&gt; function costs to find a better heuristic you can very much do so by classifying some cards and measuring the time it took in &lt;a href=&quot;https://docs.google.com/forms/d/e/1FAIpQLSffb1aN8cVwAQz6gDcjToL4EYtdIhBjYKBg58WlPBzjegChAw/viewform?usp=sf_link&quot;&gt;this form&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you instead do a different classification strategy, I would be very interested in learning about it. So please feel free to comment on the &lt;a href=&quot;https://github.com/jazcarate/deck-partitioner/issues&quot;&gt;application issue list&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;playground&quot;&gt;Playground&lt;/h2&gt;
&lt;p&gt;As I said before, I write code for a living and very much enjoy it, so I came up with a small program to do these simulations.
You can input any deck, and it will figure out all the possible ways of splitting and sorting it, and then choose the one with the least cost.&lt;/p&gt;

&lt;p&gt;You can try it out &lt;a href=&quot;https://jazcarate.github.io/deck-partitioner/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:covid&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;It‚Äôs 2021 and we are still in lockdown because of the &lt;a href=&quot;https://es.wikipedia.org/wiki/COVID-19&quot;&gt;COVID-19&lt;/a&gt;, hence why the conference was virtual.¬†&lt;a href=&quot;#fnref:covid&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:deckchecks&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://magic.wizards.com/en/articles/archive/deck-check-procedures-2000-02-29&quot;&gt;Deck Check Procedures in Wizard‚Äôs article page&lt;/a&gt;.¬†&lt;a href=&quot;#fnref:deckchecks&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:mana_value&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Previously known as ‚Äúcasting cost‚Äù, ‚Äútotal casting cost‚Äù or ‚Äúconverted mana cost‚Äù (cmc).¬†&lt;a href=&quot;#fnref:mana_value&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:partition&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;For those interested in the math, I can point you in the right direction of the formalization of this: Generating a &lt;a href=&quot;https://en.wikipedia.org/wiki/Equivalence_relation&quot;&gt;Equivalence relation&lt;/a&gt; that yields a &lt;a href=&quot;https://en.wikipedia.org/wiki/Partition_of_a_set&quot;&gt;partition&lt;/a&gt;.¬†&lt;a href=&quot;#fnref:partition&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;¬†&lt;a href=&quot;#fnref:partition:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Joaquin 'Florius' Azcarate</name></author><category term="mtg" /><summary type="html">One of the tools judges employ to thwart attempts to cheat is to require players to write down what cards they will be playing within a particular tournament, and routinely check them. Judges must perform these checks the fastest way possible to not delay the tournament. As such, they developed a myriad of techniques. I feel we under-use the availability of the decklist, so having a clear plan ahead of actually getting the deck in our hands can prove highly effective. In this post, I would like to explore some techniques' inner workings. Propose a hypothesis on why they might work in some situations but not others. Consider unexplored alternatives. And build a heuristic on what method is better for each circumstance. Join me!</summary></entry><entry><title type="html">Inspiraciones</title><link href="https://blog.florius.com.ar/xpost/2021/01/31/inspiraciones/" rel="alternate" type="text/html" title="Inspiraciones" /><published>2021-01-31T00:00:00+00:00</published><updated>2021-01-31T00:00:00+00:00</updated><id>https://blog.florius.com.ar/xpost/2021/01/31/inspiraciones</id><content type="html" xml:base="https://blog.florius.com.ar/xpost/2021/01/31/inspiraciones/">&lt;p&gt;&lt;em&gt;El post original se puede leer en mi &lt;a href=&quot;https://dev.to/florius/inspiraciones-824&quot;&gt;dev.to&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Te pasa de querer programar algo y no saber que? tengo un bloqueo de ideas hace tiempo, quiero hacer algo con xxx y no se me ocurre qu√© /cazzo/ hacer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As√≠ empez√≥ la conversaci√≥n con un amigo. Despu√©s de hablar un poco, creo haber destilado un par de ideas que me gustar√≠a compartir&lt;/p&gt;

&lt;h2 id=&quot;por-qu√©-yo&quot;&gt;¬øPor qu√© yo?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: Habiendo miles de otros posts de miles de otras personas -muchas mejor calificadas que yo-, por qu√© leer este?&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;: Creo que mi enfoque es mucho m√°s especifico del que eh encontrado: Proyectos personales de programaci√≥n, cuyo principal driver&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; es aprender algo nuevo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;prove-it&quot;&gt;Prove it&lt;/h3&gt;
&lt;p&gt;En mi porfolio (&lt;a href=&quot;https://florius.com.ar/&quot;&gt;florius.com.ar&lt;/a&gt;) podr√°s ver alguno de los proyectos m√°s recientes y m√°s interesantes. No son much√≠simos, pero son algunos. Siempre estoy tinkering&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; con algo nuevo.&lt;/p&gt;

&lt;h2 id=&quot;fuentes-de-inspiraci√≥n&quot;&gt;Fuentes de inspiraci√≥n&lt;/h2&gt;
&lt;p&gt;Voy a separar la inspiraci√≥n en 3 categor√≠as, no porque una sea m√°s ‚Äúf√°cil‚Äù o menos costosa; si no porque he conocido personas que est√°n muy entonadas con una u otra categor√≠a, y tal vez alguna de esta resuene m√°s contigo.&lt;/p&gt;

&lt;h3 id=&quot;level-1---directo&quot;&gt;Level 1 - Directo&lt;/h3&gt;
&lt;p&gt;En el trabajo, me pasa a veces que estoy haciendo algo, y pienso&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;‚ÄúUh, esto ser√≠a super guay si fuese as√≠‚Äù&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pero caigo en la realidad de que no habr√≠a forma que pueda completar el feature en el tiempo si hiciera todo ese cambio, ni que me aprueben un PR si agrego siete millones de bibliotecas üòÖ.
Entonces me lo anoto:
‚ÄúEstar√≠a bueno una aplicaci√≥n que haga X o una biblioteca que haga Y‚Äù.&lt;/p&gt;

&lt;p&gt;Tiene una aplicaci√≥n real, concreta y directa (por eso el nombre); que si existiese la usar√≠a aqu√≠ y ahora. Pero no existe.&lt;/p&gt;

&lt;p&gt;Algunos ejemplos de esto mismo&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jazcarate/koncierge&quot;&gt;GitHub :: koncierge üîî&lt;/a&gt;: Necesitabamos segmentar clientes seg√∫n un u otro atributo; entonces se me ocurri√≥ que un DSL parecido al query-dsl de Mongo podr√≠a verse bien. Finalmente terminamos utilizando algo similar en produci√≥n!&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jazcarate/aao&quot;&gt;GitHub:: Apples and Oranges&lt;/a&gt;:  Tambien en el trabajo quer√≠a una forma de testear un c√≥digo que ten√≠a todos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BigInt&lt;/code&gt;s, algunos n√∫meros ten√≠an impuestos otros no; entonces no pod√≠a sumar libremente unos con otros; por lo que me ocurri√≥ una librer√≠a para ‚Äútagear‚Äù objetos.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jazcarate/marble-os&quot;&gt;GitHub :: marble-OS&lt;/a&gt;: En la facultad, para probar y evaluar trabajos pr√°cticos, muchas veces necesitabamos lanzar programas de manera sincronizada. La mejor herramienta hasta el momento era ser una persona alta que pueda presionar en dos computadoras diferentes la tecla &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;‚Üµ Enter&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para este tipo de proyectos, recomiendo siempre estar atento a hacerse este tipo de preguntas:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Este feature/bug/issue en el que estoy trabajando: ¬øTiene alguna parte s√∫per interesante que podr√≠a extraer en su propia cosa?&lt;/li&gt;
  &lt;li&gt;¬øPuedo desacoplar completamente esta secci√≥n de l√≥gica en su propia cosa?&lt;/li&gt;
  &lt;li&gt;Veo que alguien tom√≥ esta decisi√≥n de arquitectura; ¬øpor qu√© no lo habr√°n hecho diferente? ¬øpuedo hacerlo de otra forma?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;level-2---concretization&quot;&gt;Level 2 - Concretization&lt;/h3&gt;
&lt;p&gt;Otra ‚Äúforma‚Äù que suelo descubrir nuevas ideas es encontrar un blog post o algo que sea una idea abstracta, y convertirla en algo m√°s concreto.
No es casual que me guste mirar videos sobre matem√°tica!&lt;/p&gt;

&lt;p&gt;En esta categor√≠a no empiezo de un proyecto como en la categor√≠a anterior, si no que llego a un proyecto desde algo m√°s abstracto.&lt;/p&gt;

&lt;p&gt;Algunos ejemplos de mis proyectos que surgieron a partir de esta forma de encarar problemas:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jazcarate/aao#tag-laws&quot;&gt;GitHub:: Apples and Oranges # leyes de tags&lt;/a&gt;: Hace algunos 3 a√±os vi una charla de ‚Äúpropagators‚Äù por &lt;a href=&quot;https://www.youtube.com/watch?v=acZkF6Q2XKs&quot;&gt;YouTube :: Edward Kmett&lt;/a&gt;. Sumamente interesante! Adicionalmente semirret√≠culos es un tema que eh dado en clase de Matem√°tica Discreta; y nunca le encontr√© una aplicaci√≥n tan directa y &lt;em&gt;linda&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jazcarate/tryhard/blob/main/src/Tryhard/TUI.hs#L360-L362&quot;&gt;GitHub :: Tryhard # applicativos en todos lados&lt;/a&gt; _(warning: el c√≥digo es un desastre, estaba trabajando en eso, pero otro proyecto se llev√≥ toda mi atenci√≥n por ahora üôà): Tambi√©n viendo un video de &lt;a href=&quot;https://www.youtube.com/watch?v=RtYWKG_zZrM&quot;&gt;YouTube :: Tsoding&lt;/a&gt; y la relaci√≥n de &lt;a href=&quot;https://hackage.haskell.org/package/base-4.14.1.0/docs/Control-Applicative.html#t:Applicative&quot;&gt;Applicative&lt;/a&gt; y &lt;a href=&quot;https://hackage.haskell.org/package/base-4.14.1.0/docs/Data-Monoid.html#t:Monoid&quot;&gt;Monoid&lt;/a&gt; y como podr√≠√° usar esto para ‚Äúsumar‚Äù resultados de &lt;a href=&quot;https://www.opendota.com/&quot;&gt;OpenDota&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;WIP&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rapt&lt;/code&gt;: Tambi√©n en un video de &lt;a href=&quot;https://www.youtube.com/user/Computerphile&quot;&gt;YouTube :: Computerphile&lt;/a&gt; &lt;em&gt;(¬øtendr√© un problema con la consumici√≥n de videos?)&lt;/em&gt; sobre onion routing, y encriptaci√≥n en capas; junto con contrase√±as y OTP&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;. Se que tengo una idea ah√≠, pero creo que es muy parecida a &lt;a href=&quot;https://www.vaultproject.io/&quot;&gt;Vault, de HashiCorp&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para este tipo de proyectos recomiendo pensar cada vez que escuches o leas algo (no importa de que; no digo oque hay que solo hacer uso de matem√°tica! Estoy seguro que otras ramas de la ciencia son tan aptas a esto.) pensar:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;¬øC√≥mo podr√≠a usar eso?&lt;/li&gt;
  &lt;li&gt;¬øEn qu√© universo esta idea ser√≠a √∫til?&lt;/li&gt;
  &lt;li&gt;¬øVeo que dice que se puede usar en &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X&lt;/code&gt; e &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Y&lt;/code&gt;; se podr√° usar en &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Z&lt;/code&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(&lt;strong&gt;bonus&lt;/strong&gt;: Creo que este mentalidad ayuda mucho a adquirir nuevos conocimientos. M√°s que una atenci√≥n pasiva sobre un tema nuevo)&lt;/p&gt;

&lt;h3 id=&quot;level-3---snapshot&quot;&gt;Level 3 - Snapshot&lt;/h3&gt;
&lt;p&gt;A mi gusto, la mejor forma de inspiraci√≥n: Cuando pienso solo en una interacci√≥n, en una pantalla, en un link.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jazcarate.github.io/es-dia-de-helado-de-fruta/&quot;&gt;GitHub :: es-dia-de-helado-de-fruta&lt;/a&gt;: Mi novia me dijo que hoy no era d√≠a de helado de fruta, porque hac√≠a mucho frio. Ser√≠a ideal tener una p√°gina que le pueda pasar para &lt;strong&gt;demostrarle&lt;/strong&gt; la temperatura&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://frasal.florius.com.ar/?q=velocidad%20de%20dios&quot;&gt;FrasaL&lt;/a&gt;: Tienes un amigo que habla espa√±ol traduciendo &lt;strong&gt;literalmente&lt;/strong&gt;  verbos preposicionales del ingles? Dice cosas como ‚Äúvelocidad de dios‚Äù en vez de ‚Äúbuena suerte‚Äù, y quieres pasar una p√°gina como &lt;a href=&quot;https://www.deepl.com/en/translator&quot;&gt;DeepL&lt;/a&gt; para ayudar a otras personas a comprenderle?&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/JuanFdS/delCanioBot&quot;&gt;GitHub :: delCanioBot&lt;/a&gt;: Necesitas un bot que genere im√°genes de Nicol√°s del Ca√±o, a raz√≥n de el &lt;em&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=tdOP4V4mtoY&quot;&gt;meme del a√±o, Nico del Ca√±o&lt;/a&gt;&lt;/em&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A veces estos &lt;em&gt;chistes&lt;/em&gt; incluso terminan siendo aplicaciones de verdad, como una aplicaci√≥n para coordinar car pooling (&lt;a href=&quot;https://github.com/jazcarate/catapult&quot;&gt;GitHub :: catapult&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;No tengo una buena recomendaci√≥n para estos proyectos ‚Äúchistes‚Äù, m√°s que intentar hacerte pensar que no necesariamente un proyecto tiene que ser completamente serio; y son muchas veces estos proyectos que se combinan y que sirven de lugar para aprender nuevas tecnolog√≠as o metodolog√≠as. Y te podr√≠an brindar un &lt;em&gt;armaz√≥n&lt;/em&gt; para proyectos al futuro.&lt;/p&gt;

&lt;h3 id=&quot;level-9000---todas-las-anteriores&quot;&gt;Level 9000 - Todas las anteriores&lt;/h3&gt;
&lt;p&gt;Lamentablemente, la ‚Äúcreatividad‚Äù no es un proceso s√∫per directo. A veces algo sale por un lado, a veces por otro. A veces 2 ideas inconexas se conectan en una idea mejor.
Personalmente, me gusta escribir estas esbozos de ideas en un recept√°culo f√≠sico. hay quienes prefieren un archivo en la computadora. Hay quienes tienen varios pre-ideas en la mente a la vez y nueva informaci√≥n decanta esas pre-ideas en un proyecto.&lt;/p&gt;

&lt;p&gt;Gracias por tu tiempo, y espero que algo de todo esto te ayude a encontrar inspiraci√≥n!&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;em&gt;driver&lt;/em&gt;: Un factor que hace que suceda o se desarrolle un fen√≥meno particular.¬†&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;em&gt;tinkering&lt;/em&gt;: Intentar reparar o mejorar algo de manera casual o poco met√≥dica.¬†&lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;em&gt;otp&lt;/em&gt;: One-time password¬†&lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Joaquin 'Florius' Azcarate</name></author><category term="xpost" /><summary type="html">¬øTe pasa de querer programar algo y no saber que? tengo un bloqueo de ideas hace tiempo, quiero hacer algo con xxx y no se me ocurre qu√© hacer.</summary></entry><entry><title type="html">Haskell para mentes imperativas</title><link href="https://blog.florius.com.ar/xpost/2020/12/03/haskell-para-mentes-imperativas/" rel="alternate" type="text/html" title="Haskell para mentes imperativas" /><published>2020-12-03T00:00:00+00:00</published><updated>2020-12-03T00:00:00+00:00</updated><id>https://blog.florius.com.ar/xpost/2020/12/03/haskell-para-mentes-imperativas</id><content type="html" xml:base="https://blog.florius.com.ar/xpost/2020/12/03/haskell-para-mentes-imperativas/">&lt;p&gt;&lt;em&gt;El post original se puede leer en mi &lt;a href=&quot;https://dev.to/florius/haskell-para-mentes-imperativas-4n7k&quot;&gt;dev.to&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Browseando YouTube encontr√© una playlist con un nombre muy interesante: ‚Äú&lt;a href=&quot;https://www.youtube.com/watch?v=Vgu82wiiZ90&amp;amp;list=PLe7Ei6viL6jGp1Rfu0dil1JH1SHk9bgDV&quot;&gt;Haskell for Imperative Programmers&lt;/a&gt;‚Äù en donde el autor Philipp Hagenlocher explica conceptos de Haskell en videos cortos, concisos, con varios ejemplos y hasta algunos ejercicios. Lo que me inspir√≥ a pensar c√≥mo podr√≠a aprender alguien que tiene ra√≠ces en un paradigma imperativo. Por suerte no tuve que usar mucho la imaginaci√≥n, ya que yo comenc√© con lenguajes imperativos, y en mi trabajo utilizo mayoritariamente el paradigma de objetos.&lt;/p&gt;

&lt;p&gt;En este post quiero explorar algunas cosas que creo que me hubiesen servido para aprender Haskell. Teniendo una base en alg√∫n lenguaje imperativo, usar esta para programar en Haskell.&lt;/p&gt;

&lt;p&gt;Si crees que entras en esta categor√≠a, contin√∫a leyendo.&lt;/p&gt;

&lt;h3 id=&quot;prefacio&quot;&gt;Prefacio&lt;/h3&gt;
&lt;p&gt;En este post har√© uso de analog√≠as y de patrones fuertemente asociados a la programaci√≥n imperativa, de tal forma que la carga para aclimatarse al nuevo paradigma sea la menor posible, pero no considero esta la mejora forma de programar de forma funcional. Mi razonamiento es que: usando nuestro conocimiento previo ayude a comenzar a escalar la pendiente que es aprender un paradigma nuevo, y que esto a su vez dispare nuevas e interesantes investigaciones.&lt;/p&gt;

&lt;h2 id=&quot;variables&quot;&gt;Variables&lt;/h2&gt;

&lt;p&gt;Veo muy com√∫nmente la cara de espanto cuando uno habla de un lenguaje, como Haskell, donde la inmutabilidad est√° por defecto. Prontamente surge la pregunta de ‚Äúc√≥mo puedo asignar una variable‚Äù o ‚Äúcomo puedo cambiar el valor de un contador‚Äù.
Recordemos que Haskell es un lenguaje de programaci√≥n &lt;a href=&quot;https://es.wikipedia.org/wiki/Turing_completo&quot;&gt;Turing completo&lt;/a&gt;, as√≠ que no es que &lt;em&gt;no se pueda&lt;/em&gt; hacer, solo que hay que reconocer  que hay diferentes formas de afrontar un problema.&lt;/p&gt;

&lt;p&gt;En Haskell, el s√≠mbolo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&lt;/code&gt; no representa una asignaci√≥n, si no es m√°s pr√≥ximo a la idea matem√°tica del &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&lt;/code&gt; donde lo leemos (e interpretamos) como que algo &lt;strong&gt;es&lt;/strong&gt; otra cosa.&lt;/p&gt;

&lt;p&gt;En un lenguaje imperativo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x = 3&lt;/code&gt; lo leemos como ‚Äúasignamos el valor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt; a la variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;‚Äù, donde en un paradigma funcional, lo deber√≠amos interpretar como ‚Äú&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; &lt;em&gt;es&lt;/em&gt; 3‚Äù. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; no puede cambiar. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; simplemente &lt;em&gt;es&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Se que esta justificaci√≥n suele no quitar el pavor. Tras indagar m√°s a fondo, suelo descubrir que hay dos temas distintos (pero muy  sobrelapados en los lenguajes imperativos):&lt;/p&gt;

&lt;p&gt;Ponerle nombre a algo ‚Äúintermedio‚Äù. Por ejemplo, si uno est√° escribiendo un m√©todo, y ve que hay una operaci√≥n que se repite dos veces, suele ser considerado una buena pr√°ctica extraer lo com√∫n a una ‚Äúvariable‚Äù y ponerle nombre. Por ejemplo, podr√≠amos empezar con un m√©todo:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;y luego refactorizar a algo como:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tama√±o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tama√±o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tama√±o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;En este acaso &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tama√±o&lt;/code&gt; si bien es una ‚Äúvariable‚Äù, su intenci√≥n no es variar en el contexto de la funci√≥n. Es tan com√∫n y √∫til poder aseverar sobre qu√© cosas no cambian, que en otros lenguajes existe la idea que las ‚Äúvariables‚Äù puedan ser constantes (vaya ox√≠moron). Como &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const&lt;/code&gt; en JavaScript y PHP, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;val&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&lt;/code&gt;en Kotlin, variables en may√∫sculas en Python o &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;final&lt;/code&gt; en Java.&lt;/p&gt;

&lt;p&gt;Lectores atentos pueden reconocer un potencial problema en esta refactorizaci√≥n, en donde no podemos asegurar 100% que el m√©todo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List::size()&lt;/code&gt; no cambia la lista, y que invocarlo 2 veces como en el c√≥digo de ‚Äúantes‚Äù podr√≠a no ser igual al c√≥digo de ‚Äúdespues‚Äù en donde solo se invoca una vez. Dado que conocemos la sem√°ntica de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List::size()&lt;/code&gt;, podemos descansar que no va a alterar la lista; pero a veces, por la naturaleza de la mutabilidad, esto lleva a problemas. Toda una categor√≠a de problemas que simplemente no pueden ocurrir en un mundo inmutable üòâ.&lt;/p&gt;

&lt;p&gt;Esto mismo podr√≠amos lograr en Haskell con palabras reservadas como &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let ‚Ä¶ in&lt;/code&gt; o &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;where&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
       &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Y luego del refactor:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
   &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tama&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;√±&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;
   &lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tama&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;√±&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
       &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;tama&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;√±&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;o&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tama&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;√±&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
       &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;tama&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;√±&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;
   &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tama&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;√±&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Si bien hacen lo mismo, tienen sutiles diferencias a las entrar√© en detalle (pero si est√° aqu√≠: &lt;a href=&quot;https://wiki.haskell.org/Let_vs._Where&quot;&gt;Let vs. Where - HaskellWiki&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;cosas-que-cambian&quot;&gt;Cosas que cambian&lt;/h2&gt;

&lt;p&gt;El otro &lt;em&gt;sabor&lt;/em&gt; de variables, es el de algo que cambia; y aqu√≠, no tenemos suerte. No vamos a poder hacerlo. Pero eso no quita que podamos generar abstracciones para poder escribir algo que &lt;em&gt;se parezca&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Pero antes de hablar de cosas que cambian, primero necesitamos estar de acuerdo en algunas convenciones. Cosas como&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;En donde una funci√≥n altera el valor que se le pasa son &lt;em&gt;el mal&lt;/em&gt;, y no poder hacerlo es un &lt;em&gt;feature&lt;/em&gt; (Aunque me encanta la idea de &lt;a href=&quot;https://www.tweag.io/blog/2020-11-11-linear-dps/&quot;&gt;Pure destination-passing style in Linear Haskell&lt;/a&gt; cuando se apalanca del maravilloso sistema de tipos).&lt;/p&gt;

&lt;p&gt;Algo mucho m√°s sensible ser√≠a una funci√≥n que tome el argumento y devuelva un nuevo n√∫mero, resultado de la suma del argumento y 4.&lt;/p&gt;

&lt;p&gt;Pero no siempre es tan sencillo. A veces tenemos varias mutaciones encadenadas, o unas que dependen de otras; por lo que podemos aplicar este algoritmo mental:
Cada vez que fu√©semos a cambiar una variable, en realidad utilizaremos una nueva variable que sea el resultado del cambio, y de ahora en adelante, utilizar el nuevo nombre.&lt;/p&gt;

&lt;p&gt;Por ejemplo, con la nueva herramienta de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;let ‚Ä¶ in&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;buzz&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;n&quot;&gt;buzz&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; 
       &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Si esta forma de escribir parece tediosa (lo es!), al final de la pr√≥xima secci√≥n volveremos sobre esto, pero todav√≠a tenemos algo que podemos hacer. Revisemos qu√© es lo que es tan inconveniente: nombrar los pasos intermedios (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x0 - x3&lt;/code&gt;) ¬øPodemos no hacerlo?.&lt;/p&gt;

&lt;p&gt;De esta forma nos acercamos a un patr√≥n muy com√∫n en funcional, en donde uno tiene funciones intermedias que toman un valor, y devuelven ‚Äúel nuevo‚Äù valor. Podemos concatenar estas operaciones (que hablan de cambios, no de variables).&lt;/p&gt;

&lt;p&gt;Imaginemos el mismo ejemplo, pero vamos a re escribirlo en peque√±as funciones intermedias que cambien el valor.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;n&quot;&gt;buzz&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;f3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
      
       &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Lamentablemente como es un ejemplo tan sint√©tico, los nombres de las funciones intermedias ser√°n malos; pero espero que puedan imaginarse que estas funciones sean cosas como &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;incrementarEdad&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extraerDinero&lt;/code&gt; u otro nombre m√°s cercano al dominio de lo que esten programando.&lt;/p&gt;

&lt;p&gt;Por ello voy a cambiar levemente el ejemplo para tener algo que sea m√°s humanamente legible.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;n&quot;&gt;numeroValidador&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;normalizarValidador&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;migrarCoeficiente&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;esValido&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;tarjetaValida&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numeroValidador&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalizarValidador&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;migrarCoeficiente&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;esValido&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ahora podemos intentar pensar sobre nuestra &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tarjetaValida&lt;/code&gt;, donde lo que tiene que pasar es, en orden:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Dado un n√∫mero pasado como par√°metro (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Tomamos el n√∫mero validador (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x mod 3&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Lo normalizamos (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x + 2&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Migramos el coeficiente (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x + 5&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Y chequeamos que sea v√°lido (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x &amp;gt; 3&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Probablemente todav√≠a no sea evidente, pero ahora podemos hacer un refactor de ‚Äúinline‚Äù en cada variable intermedia (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x0 - x3&lt;/code&gt;). Empecemos con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x3&lt;/code&gt; e iremos ineline-ando de a una&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;n&quot;&gt;tarjetaValida&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numeroValidador&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalizarValidador&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;esValido&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;migrarCoeficiente&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;n&quot;&gt;tarjetaValida&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numeroValidador&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;esValido&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;migrarCoeficiente&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normalizarValidador&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;n&quot;&gt;tarjetaValida&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;esValido&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;migrarCoeficiente&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normalizarValidador&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numeroValidador&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;n&quot;&gt;tarjetaValida&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;esValido&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;migrarCoeficiente&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normalizarValidador&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numeroValidador&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Esto se parece mucho m√°s a la descripci√≥n funcional de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tarjetaValida&lt;/code&gt;, pero est√° escrito ‚Äúal rev√©s‚Äù. Por razones como esta existen &lt;a href=&quot;https://hackage.haskell.org/package/base-4.14.0.0/docs/Data-Function.html#v:-38-&quot;&gt;combinadores como &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;&lt;/a&gt;, donde hablando mal y pronto, √©ste es el operador de &lt;em&gt;aplicaci√≥n reversa&lt;/em&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;n&quot;&gt;tarjetaValida&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;numeroValidador&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;normalizarValidador&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;migrarCoeficiente&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;esValido&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Es interesante notar como todas nuestras funciones de ‚Äúcambio‚Äù tienen la misma firma: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:: Int -&amp;gt; Int&lt;/code&gt;. De forma m√°s gen√©rica, son funciones que toman un valor de un tipo, y &lt;em&gt;devuelven&lt;/em&gt; algo del mismo tipo.&lt;/p&gt;

&lt;h3 id=&quot;aplicaci√≥n-parcial&quot;&gt;Aplicaci√≥n parcial&lt;/h3&gt;
&lt;p&gt;Con el c√≥digo que tenemos hasta aqu√≠; podr√≠amos cambiarlo para que &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;migrarCoeficiente&lt;/code&gt; no siempre sume 5, si no que pueda ser parametrizable por una letra.
Sabiendo que hay una funci√≥n que transforma una letra a un n√∫mero &lt;a href=&quot;https://hackage.haskell.org/package/base-4.14.0.0/docs/Data-Char.html#v:ord&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ord :: Char -&amp;gt; Int&lt;/code&gt;&lt;/a&gt; 
Podr√≠amos cambiar &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;migrarCoeficiente&lt;/code&gt; a:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;n&quot;&gt;migrarCoeficiente&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;migrarCoeficiente&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letra&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ord&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caracter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ahora nuestra &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tarjetaValida&lt;/code&gt; no sufre muchos cambios:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;n&quot;&gt;tarjetaValida&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;numeroValidador&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;normalizarValidador&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;migrarCoeficiente&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'f'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;esValido&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Y eso fu√© gracias a &lt;a href=&quot;http://aprendehaskell.es/content/OrdenSuperior.html&quot;&gt;la currificaci√≥n&lt;/a&gt; de todas las funciones en Haskell!&lt;/p&gt;

&lt;h3 id=&quot;a-veces&quot;&gt;A veces&lt;/h3&gt;

&lt;p&gt;Otro gran ‚Äúhack‚Äù que nos permite la mutabilidad, es la de cambiar el valor, pero solo seg√∫n un flujo de control. Algo como:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;qux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;En donde asignamos una variable que seg√∫n uno u otro flujo de control puede cambiar. Siempre podremos reescribir esto de forma inmutable. Por ejemplo&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;n&quot;&gt;qux&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Interesante notar que necesitamos un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;else&lt;/code&gt; que ‚Äúdeje todo como estaba‚Äù, pues no podemos ‚Äúno hacer nada‚Äù en esta forma de escribirlo.&lt;/p&gt;

&lt;h2 id=&quot;monadas&quot;&gt;Monadas&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;(No pod√≠a ser un post de Haskell, y no mencionar a las monadas)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Una idea en la programaci√≥n imperativa muy arraigada es que uno escribe una l√≠nea debajo de la otra, y esto hace que se ejecuten en ese orden.
Tan arraigada que casi no se considera una decisi√≥n del lenguaje, pero lo es! Es una decisi√≥n de dise√±o, y una que en un paradigma funcional es f√°cil escaparse.&lt;/p&gt;

&lt;p&gt;Pero a veces, queremos ordenar una secuencia de cosas. Recordemos el ejemplo anterior de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;buz&lt;/code&gt;. Hay una monada (y probablemente &lt;a href=&quot;http://aprendehaskell.es/content/MasMonadas.html&quot;&gt;miles de&lt;/a&gt; &lt;a href=&quot;https://gist.github.com/sdiehl/8d991a718f7a9c80f54b&quot;&gt;tutoriales de&lt;/a&gt; &lt;a href=&quot;https://wiki.haskell.org/State_Monad&quot;&gt;como&lt;/a&gt; &lt;a href=&quot;https://mmhaskell.com/monads/state&quot;&gt;implementarla&lt;/a&gt;) llamada ‚Äústate‚Äù que representa una forma de secuenciar operaciones, e ir mutando un valor. Por lo que uno podr√≠a escribir algo mucho m√°s parecido a la forma imperativa:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;cd&quot;&gt;--            |----- Va a ir mutando un Int
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--            v   v- va a retornar un booleano
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;buz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;buz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Cada &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ret&lt;/code&gt; en este caso solo existe dentro del lambda &lt;em&gt;(todo lo que est√© entre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(\&lt;/code&gt; y &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;)&lt;/code&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Muchas veces se ven las monadas con el &lt;a href=&quot;https://es.wikipedia.org/wiki/Az%C3%BAcar_sint%C3%A1ctico&quot;&gt;&lt;em&gt;az√∫car sint√°ctico&lt;/em&gt;&lt;/a&gt; de la notaci√≥n &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do&lt;/code&gt;, que lo hace muy conveniente porque nos deja, como en un paradigma imperativo, escribir una l√≠nea debajo de la otra.&lt;/p&gt;

&lt;h3 id=&quot;monadas-cont&quot;&gt;Monadas Cont.&lt;/h3&gt;
&lt;p&gt;Otra gran raz√≥n para implementar una secuencia de operaciones, es que estas puedan fallar. El fallo en cualquier rengl√≥n invalide toda la computaci√≥n. Pensemos en m√©todos que podr√≠an lanzar excepciones.
Para esto tambi√©n existe una monada! Y podr√≠amos escribir algo como:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;precio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itemConNombre&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nombre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventario&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Errores&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;noExiste&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nombre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nombre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cantidad&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Errores&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fueraDeStock&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;De esta forma&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Errores&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FueraDeStock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NoExiste&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;buscar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Inventario&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Item&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;buscar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;precio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Errores&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;precio&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nombre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maybe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NoExiste&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nombre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Right&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemEncontrado&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- (1)
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cantidad&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FueraDeStock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;precio&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;
  &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;itemEncontrado&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Item&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;itemEncontrado&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buscar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inventario&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nombre&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;La idea de la funci√≥n &lt;a href=&quot;https://hackage.haskell.org/package/base-4.14.0.0/docs/Prelude.html#v:maybe&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maybe&lt;/code&gt;&lt;/a&gt; es poder extraer el valor de un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Maybe&lt;/code&gt; (algo que puede o no estar). En el caso de que pueda fallar, &lt;em&gt;devolveremos&lt;/em&gt; un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Left&lt;/code&gt; (recordemos, representar√≠a como lanzar una excepci√≥n), y en el caso que hubiese un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Item&lt;/code&gt;, devolveremos un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Right&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;De esta forma, no &lt;em&gt;ejecutaremos&lt;/em&gt; el &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return&lt;/code&gt; hasta que no pasen las dos condiciones anteriores.&lt;/p&gt;

&lt;h2 id=&quot;getter-y-setter&quot;&gt;Getter y Setter&lt;/h2&gt;

&lt;p&gt;Por √∫ltimo, quiero tocar algo de modelado, y la parte de lo que menos quiero escribir, porque es la que m√°s se separa del paradigma; pero no obstante puedo ver c√≥mo alguien puede estar tentado a utilizar herramientas de modelado de paradigmas que ya conoce, y pensar en un &lt;a href=&quot;http://aprendehaskell.es/content/ClasesDeTipos.html&quot;&gt;&lt;em&gt;record&lt;/em&gt;&lt;/a&gt; es parecido a un objeto. Pero si as√≠ fuera‚Ä¶ donde ponemos los m√©todos de este objeto?! (Sin entrar en el mundo de &lt;a href=&quot;https://hackage.haskell.org/package/lens&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lens&lt;/code&gt;&lt;/a&gt;).
No voy a objetar (ü§≠) porque se que yo lo hice durante mucho tiempo, as√≠ que mientras que sepamos que hay &lt;em&gt;tela para cortar&lt;/em&gt;, por ahora puedo vivir con que pensemos que son objetos.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;podr√≠amos escribirlo as√≠:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Persona&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Persona&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edad&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Y tendremos &lt;em&gt;gratis&lt;/em&gt; la funci√≥n &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edad :: Persona -&amp;gt; Int&lt;/code&gt; que ‚Äúsaca‚Äù la edad de una persona. Cual un getter, y la construcci√≥n:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;n&quot;&gt;cambiarEdad&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Persona&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Persona&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cambiarEdad&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nuevaEdad&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;persona&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;persona&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edad&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nuevaEdad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Como un setter. Pero, como en OOP no estamos limitados a simplemente asignar el nuevo valor; podr√≠amos hacer lo que queramos!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;n&quot;&gt;cambiarEdad&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Persona&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Persona&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cambiarEdad&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nuevaEdad&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;persona&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;persona&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edad&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nuevaEdad&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Podemos encontrar un patr√≥n recurrente, donde tengamos funciones que &lt;em&gt;terminen&lt;/em&gt; con el tipo: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo :: ‚Ä¶ -&amp;gt; Algo -&amp;gt; Algo&lt;/code&gt;. Si recordamos el ejemplo de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tarjetaValida&lt;/code&gt;, todas las funciones intermedias que ten√≠amos eran del tipo: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:: Int -&amp;gt; Int&lt;/code&gt;, y el ejercicio al lector hubiera generado una funci√≥n con el tipo: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:: Char -&amp;gt; Int -&amp;gt; Int&lt;/code&gt;. Podemos pensar en toda esta familia de funciones como funciones que ‚Äúalteran‚Äù. Adem√°s ahora ya sabemos c√≥mo combinarlas!
Por ejemplo, concatenar listas  &lt;a href=&quot;https://hackage.haskell.org/package/base-4.14.0.0/docs/GHC-List.html#v:-43--43-&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(++) :: [a] -&amp;gt; [a] -&amp;gt; [a] &lt;/code&gt;&lt;/a&gt; en donde toma una primera lista y una segunda, y las ‚Äúaltera‚Äù (recordando que en realidad lo que hace es &lt;em&gt;devolver&lt;/em&gt; una nueva lista) o tomar los primeros &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; elementos (&lt;a href=&quot;https://hackage.haskell.org/package/base-4.14.0.0/docs/GHC-List.html#v:take&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;take :: Int -&amp;gt; [a] -&amp;gt; [a]&lt;/code&gt;&lt;/a&gt;). Hay much√≠simas funciones como estas, y probablemente escribamos tantas de estas como ‚Äúm√©todos‚Äù podr√≠an tener nuestros objetos, si lo modelamos en OOP.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Persona&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;edad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;altura&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;crecer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a√±os&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a√±os&lt;/span&gt;
                 &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;altura&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a√±os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Persona&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Persona&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edad&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;altura&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;crecer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Persona&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Persona&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;crecer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;√±&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;persona&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Persona&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edad&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edad&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;persona&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;√±&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;altura&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;altura&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;persona&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;√±&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;fin&quot;&gt;Fin&lt;/h2&gt;
&lt;p&gt;Espero que con estas herramientas, el prospecto de programar en Haskell sea menos aterrorizador.&lt;/p&gt;</content><author><name>Joaquin 'Florius' Azcarate</name></author><category term="xpost" /><summary type="html">En este post quiero explorar algunas cosas que creo que me hubiesen servido para aprender Haskell. Teniendo una base en alg√∫n lenguaje imperativo, usar esta para programar en Haskell.</summary></entry><entry><title type="html">koncierge Una librer√≠a para segmentar usuarios</title><link href="https://blog.florius.com.ar/xpost/2020/09/14/koncierge-una-libreria-para-segmentar-usuarios/" rel="alternate" type="text/html" title="koncierge Una librer√≠a para segmentar usuarios" /><published>2020-09-14T00:00:00+00:00</published><updated>2020-09-14T00:00:00+00:00</updated><id>https://blog.florius.com.ar/xpost/2020/09/14/koncierge-una-libreria-para-segmentar-usuarios</id><content type="html" xml:base="https://blog.florius.com.ar/xpost/2020/09/14/koncierge-una-libreria-para-segmentar-usuarios/">&lt;p&gt;&lt;em&gt;El post original se puede leer en mi &lt;a href=&quot;https://dev.to/florius/koncierge-una-libreria-para-segmentar-usuarios-fjp&quot;&gt;dev.to&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;trasfondo&quot;&gt;Trasfondo&lt;/h2&gt;

&lt;p&gt;En donde estoy trabajando, cada nuevo feature o idea, pasa por un proceso de &lt;em&gt;A/B Testing&lt;/em&gt;.
Normalmente lo que hacemos es:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Generamos una hip√≥tesis del estilo: ‚ÄúSi los usuarios tuviesen una notificaci√≥n cuando pasa &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X&lt;/code&gt;, entonces van a hacer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Y&lt;/code&gt; m√°s seguido‚Äù.&lt;/li&gt;
  &lt;li&gt;Desarrollamos esta notificaci√≥n, o lo que sea.&lt;/li&gt;
  &lt;li&gt;Apuntamos a alg√∫n mercado para participar de esta prueba&lt;/li&gt;
  &lt;li&gt;Dividimos a la mitad de los usuarios de ese mercado, tal que vean e interact√∫en con en nuevo feature, mientras que la otra mitad (grupo &lt;em&gt;control&lt;/em&gt;) no.&lt;/li&gt;
  &lt;li&gt;Esperamos dos semanas&lt;/li&gt;
  &lt;li&gt;Comparamos las m√©tricas entre los dos grupos.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Este √∫ltimo paso puede llevar a miles de ramificaciones: Activamos el feature para toda la poblaci√≥n. Cambiamos algo y volvemos a hacer una prueba. Lo deshabilitamos por completo porque nuestra hip√≥tesis era incorrecta. Etc, etc.&lt;/p&gt;

&lt;p&gt;Para la segmentaci√≥n de la poblaci√≥n, estamos usando un servicio de un tercero. A este servicio, ocasionalmente le brindamos la informaci√≥n de segmentaci√≥n de nuestros usuarios.
Informaci√≥n como&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;El usuario `123` es de Madrid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;para que luego, cuando queramos segmentar, podr√≠amos segmentar solo usuarios de Madrid.&lt;/p&gt;

&lt;p&gt;Este servicio externo, adicionalmente, solo nos provee acceso a las variantes (si un usuario pertenece al segmento, es parte del grupo de control, o es parte del grupo que participa) mediante un SDK para usar en m√≥viles (iOS y Android).&lt;/p&gt;

&lt;p&gt;Esto nos presentaba dos dificultades:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Si quisi√©ramos hacer un A/B Test en alguno de los micro-servicios de backend, no podr√≠amos consultar a este servicio.&lt;/li&gt;
  &lt;li&gt;Si quisi√©ramos segmentar por algo de lo que no le hab√≠amos informado al servicio, deber√≠amos compartirle toda esta nueva informaci√≥n para que este pueda segmentar.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Por esta situaci√≥n, decidimos crear un micro-servicio que se encargue de segmentar y separar en variantes a nuestros usuarios.&lt;/p&gt;

&lt;h2 id=&quot;problemas&quot;&gt;Problemas&lt;/h2&gt;

&lt;p&gt;R√°pidamente nos vimos enfrentados a resolver como hacer para obtener la informaci√≥n para segmentar.&lt;/p&gt;

&lt;p&gt;Normalmente segmentamos por pa√≠s, lo que ser√≠a sencillo hacer que el nuevo micro-servicio consultara con otro micro-servicio de informaci√≥n; y obtuviese el pa√≠s del usuario.
Con esta nueva informaci√≥n, podr√≠amos segmentar.&lt;/p&gt;

&lt;p&gt;Lo que presenta un desaf√≠o interesante:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Como evitar que este micro-servicio crezca
cada vez introduzcamos un nuevo micro-servicio que almacene
alguna informaci√≥n del usuario?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Por eso, pensamos que podr√≠amos delegar la responsabilidad de obtener el &lt;em&gt;contexto&lt;/em&gt; del usuario, a quien consuma este micro-servicio; por lo que una llamada podr√≠a ser:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Dado el usuario `123`, de Madrid;
a qu√© variante pertenece?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;De esta manera, es quien consume quien necesita saber todas las dependencias del experimento, y cada experimento puede tener dependencias distintas, de distintas formas de computarse, y el micro-servicio podr√≠a no crecer.&lt;/p&gt;

&lt;h2 id=&quot;dsl-domain-specific-language---lenguaje-espec√≠fico-de-dominio&quot;&gt;DSL (Domain-specific language - Lenguaje espec√≠fico de dominio)&lt;/h2&gt;

&lt;p&gt;Ya sab√≠amos como querr√≠amos que se comporte el micro-servicio, ahora necesit√°bamos una forma de expresar como querr√≠amos segmentar nuestra poblaci√≥n. Hac√≠a poco estaba trabajando mucho con &lt;a href=&quot;https://www.mongodb.com/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mongo&lt;/code&gt;&lt;/a&gt; y se me ocurri√≥ que un lenguaje de consultas como el de mongo podr√≠a ser interesante de explorar.
De tal forma que una segmentaci√≥n como:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Quiero que solo participen del experimento `EXP001`,
usuarios quienes sean de Madrid.
De estos, la mitad estar√°n en el grupo de participando
y el esto en control.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Se transformar√≠a en:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;EXP001&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;ubicaci√≥n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Madrid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;$children&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;participando&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;$rand&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;$gt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;control&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://koncierge-playground.herokuapp.com/?context=%7B%0A%20%20%20%20%22ubicaci%C3%B3n%22:%20%22Madrid%22,%0A%20%20%20%20%22userId%22:%205%0A%7D&amp;amp;experiment=%7B%0A%20%20%20%20%22EXP001%22:%20%7B%0A%20%20%20%20%20%20%20%20%22ubicaci%C3%B3n%22:%20%22Madrid%22,%0A%20%20%20%20%20%20%20%20%22%24children%22:%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22participando%22:%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22%24rand%22:%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22%24gt%22:%200.5%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D,%0A%20%20%20%20%20%20%20%20%20%20%20%20%22control%22:%20%7B%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D&quot;&gt;Playground&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;De esta manera, quien consuma al micro-servicio deber√≠a proveer, al menos, la informaci√≥n de la &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;ubicaci√≥n&quot;&lt;/code&gt; del usuario.
Una posible consulta podr√≠a ser con el contexto:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;ubicaci√≥n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Madrid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;El micro-servicio deber√≠a responder que pertenece al &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXP001&lt;/code&gt; (dado que la ubicaci√≥n empareja con la definici√≥n), y podr√≠a pertenecer a la variante &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;participando&lt;/code&gt; o &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;control&lt;/code&gt;.
Los usuarios deber√≠an estar distribuidos 50%-50%; dado que hay un 50% de probabilidad que un numero al azar, uniformemente distribuido entre 0 y 1 (como es &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$rand&lt;/code&gt;) sea mayor a 0.5.&lt;/p&gt;

&lt;p&gt;Con esta idea, sabiendo que la intenci√≥n era que el micro-servicio no dependiente de ninguna otra parte de arquitectura de nuestro ecosistema; se me ocurri√≥ que podr√≠a desarrollarlo como una librer√≠a p√∫blica; por si alguien m√°s tiene la necesidad que tuvimos nosotros.&lt;/p&gt;

&lt;h2 id=&quot;koncierge-&quot;&gt;koncierge üõé&lt;/h2&gt;

&lt;p&gt;La librer√≠a est√° en &lt;a href=&quot;https://github.com/jazcarate/koncierge#readme&quot;&gt;GitHub :: jazcarate/koncierge&lt;/a&gt;&lt;/p&gt;</content><author><name>Joaquin 'Florius' Azcarate</name></author><category term="xpost" /><category term="show-and-tell" /><summary type="html">La historia de una librer√≠a para evaluar variantes de tests AB, dado una definici√≥n de un experimento con un DSL parecido a Mongo y un contexto.</summary></entry><entry><title type="html">The essence of Event Sourcing</title><link href="https://blog.florius.com.ar/xpost/2019/07/10/the-essence-of-event-sourcing/" rel="alternate" type="text/html" title="The essence of Event Sourcing" /><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><id>https://blog.florius.com.ar/xpost/2019/07/10/the-essence-of-event-sourcing</id><content type="html" xml:base="https://blog.florius.com.ar/xpost/2019/07/10/the-essence-of-event-sourcing/">&lt;p&gt;&lt;em&gt;Original post can be found in the &lt;a href=&quot;https://blog.10pines.com/2019/07/10/the-essence-of-event-sourcing/&quot;&gt;10Pines blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Event Sourcing is a somewhat trending topic, but by no accounts a new one. Right now you can find a lot of stories on how to event Source in Rust, Kafka or PostgreSQL, but I‚Äôve found a lack of high concept blog posts on what &lt;strong&gt;is&lt;/strong&gt; event sourcing‚Ä¶ or rather, I‚Äôve found an overwhelming amount of supposedly event sourcing posts, all talking about a lot of different things (I‚Äôm looking at you CQRS).&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://ssl.gstatic.com/trends_nrtr/2431_RC04/embed_loader.js&quot;&gt;&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot;&gt;trends.embed.renderExploreWidget(&quot;TIMESERIES&quot;, {&quot;comparisonItem&quot;:[{&quot;keyword&quot;:&quot;Event Sourcing&quot;,&quot;geo&quot;:&quot;&quot;,&quot;time&quot;:&quot;today 5-y&quot;}],&quot;category&quot;:0,&quot;property&quot;:&quot;&quot;}, {&quot;exploreQuery&quot;:&quot;date=today%205-y&amp;q=Event%20Sourcing&quot;,&quot;guestPath&quot;:&quot;https://trends.google.com:443/trends/embed/&quot;});&lt;/script&gt;

&lt;p&gt;So, I‚Äôll throw my wrench in the works and try to explain what I see as ‚ÄúEvent Sourcing‚Äù, not by actually going into any technical details, but rather into how we solve a problem on that subject.&lt;/p&gt;

&lt;h2 id=&quot;backstory-sourcing-events&quot;&gt;Backstory (Sourcing Events)&lt;/h2&gt;

&lt;p&gt;We had a small internal app that we used in big meetings to serialize conversations. Think of it as an over-complicated, over-designed queue. The app had a backend and a frontend, both which shared the particular state that the app should show to the user.&lt;/p&gt;

&lt;p&gt;Basically: Who was talking, and who comes next.&lt;/p&gt;

&lt;p&gt;The app kept all of our smartphones in sync. Whenever someone, say Joe, pushed the ‚ÄúI want to talk next‚Äù button, the backend did all the computations to add him to the end of the queue, and all of our smartphones got the message with the new state to display. Joe was now on the queue. Waiting.&lt;/p&gt;

&lt;p&gt;This was good enough for several meetings but we, as a tech savvy company, wanted more! So, of course, we added features like emoji support to üëç, üëé and ask that the speaker would wrap up (üåØ).&lt;/p&gt;

&lt;p&gt;So far, no Events to be Sourced whatsoever.&lt;/p&gt;

&lt;p&gt;After a new round of emoji-enhanced meetings, I wondered: How many üëç did I had when I spoke last week?&lt;/p&gt;

&lt;p&gt;I had no way of knowing. The backend was &lt;em&gt;updating&lt;/em&gt; the list of reactions every time a new speaker‚Äôs turn was up. And therein laid my problem. I never considered that after the meeting I might want to know something as simple as that.&lt;/p&gt;

&lt;p&gt;So we put on our thinking hats and settled on a simple heuristic:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No Updates. No Deletes.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-actual-potato-eventing-source&quot;&gt;The actual potato (Eventing Source)&lt;/h2&gt;

&lt;p&gt;No Updates, no deletes might look like a daunting feat. How would we &lt;a href=&quot;https://blog.10pines.com/2019/05/27/reifying-problems-in-our-software/&quot;&gt;reflect reality&lt;/a&gt; without the basic premise that &lt;strong&gt;things change&lt;/strong&gt;. Luckily, we have functional programing close to our hearts here at 10Pines, and we can imagine a world where ‚Äúthings are immutable‚Äù.&lt;/p&gt;

&lt;p&gt;So we had a frontend that was sending the intentions. What the user wanted to do. I will call this intentions &lt;strong&gt;Events&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We had 3 major events:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;‚ÄúI want to talk‚Äù event.&lt;/li&gt;
  &lt;li&gt;‚ÄúI don‚Äôt want to talk anymore‚Äù event&lt;/li&gt;
  &lt;li&gt;‚ÄúI want to react with a üëç‚Äù event&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice this were not &lt;em&gt;‚ÄúAdd me to the queue‚Äù&lt;/em&gt;, or &lt;em&gt;‚ÄúNow the speaker has 5 üëç‚Äù&lt;/em&gt;, but rather the intention the user had.&lt;/p&gt;

&lt;p&gt;Now, the backend had to receive these events, and instead of &lt;strong&gt;updating&lt;/strong&gt; its state, saving it and broadcasting it; we were saving the event and computing a new state (based on the previous state and this new event)&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Previous state&lt;/th&gt;
      &lt;th&gt;Event&lt;/th&gt;
      &lt;th&gt;Current state&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ currentSpeaker: Joaco, queue: [] }&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Dave wants to talk&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ currentSpeaker: Joaco, queue: [Dave] }&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;And, you guessed it: the previous state was &lt;strong&gt;itself&lt;/strong&gt; computed with its previous state plus the last event before this new one. So on and so forth.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Previous-previous state&lt;/th&gt;
      &lt;th&gt;Event&lt;/th&gt;
      &lt;th&gt;Previous state&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ currentSpeaker: nil, queue: [] }&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Joaco wants to talk&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ currentSpeaker: Joaco, queue: [] }&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We changed from a state that was being updated, to adding onto a list events, and finding out the new state computing every event and how they changed the state. No information can be lost. Ever. &lt;strong&gt;No updates. No deletes.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;back-to-the-original-question-source-event&quot;&gt;Back to the original question (Source Event)&lt;/h2&gt;

&lt;p&gt;How many reactions did I have. Well, now I could figure this out. I just needed to replay all the events, but now, instead of having a state that had the whole queue, I‚Äôd use the events to transform a different, more useful state:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;A state&lt;/th&gt;
      &lt;th&gt;Event&lt;/th&gt;
      &lt;th&gt;New state&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ reactions_joaco_had: 0 }&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Joaco wants to talk&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ reactions_joaco_had: 0 }&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;A state&lt;/th&gt;
      &lt;th&gt;Event&lt;/th&gt;
      &lt;th&gt;New state&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ reactions_joaco_had: 0 }&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;I want to react with a üëç&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ reactions_joaco_had: 1 }&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;*This is an oversimplification because we would still need to know who was talking at the time to know if we had to increment the reaction counter or not.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is called a projection, and it is the way we can ‚Äúfold‚Äù our events into relevant information.&lt;/p&gt;

&lt;h2 id=&quot;lets-recap-evented-source&quot;&gt;Lets recap (Evented Source)&lt;/h2&gt;

&lt;p&gt;We changed the way we thought of our storage. Rather than update what we know, we add to an infinite list the events that change our domain.&lt;/p&gt;

&lt;p&gt;This way, we can &lt;em&gt;replay&lt;/em&gt; those events and answer questions we never thought we wanted to ask at the time of writing the code.&lt;/p&gt;

&lt;h2 id=&quot;food-for-thought&quot;&gt;Food for thought:&lt;/h2&gt;

&lt;p&gt;I wanted to keep this post short and high-concept; but I‚Äôll let the reader think of some interesting things that steam from this kind of approach:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If we ever botched the part of the system that computed new states; we could rollout a fixed version, and replay the whole history of the application, and the error would cease to exist.&lt;/li&gt;
  &lt;li&gt;Structural changes to the database stop being something to worry about. We are only storing events, and those don‚Äôt change often. Rolling back and replaying the history is the fabric of event sourcing.&lt;/li&gt;
  &lt;li&gt;The new state doesn‚Äôt need to be computed from the first initial state, along with all the events thereafter. We can periodically take ‚Äúsnapshots‚Äù of events, and compute newer events from that saved state.&lt;/li&gt;
  &lt;li&gt;The same stream of events can be used by many applications, each having their own projection to answer a wildly different set of questions.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Joaquin 'Florius' Azcarate</name></author><category term="xpost" /><summary type="html">Event Sourcing is a somewhat trending topic, and you can find a lot of blog posts on what event sourcing supposedly is. I‚Äôll throw my wrench in the works and try to explain what I see as ‚ÄúEvent Sourcing‚Äù.</summary></entry></feed>